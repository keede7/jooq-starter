/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaUnusedIndexes extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.schema_unused_indexes</code>
     */
    public static final SchemaUnusedIndexes SCHEMA_UNUSED_INDEXES = new SchemaUnusedIndexes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.schema_unused_indexes.object_schema</code>.
     */
    public final TableField<Record, String> OBJECT_SCHEMA = createField(DSL.name("object_schema"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.schema_unused_indexes.object_name</code>.
     */
    public final TableField<Record, String> OBJECT_NAME = createField(DSL.name("object_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.schema_unused_indexes.index_name</code>.
     */
    public final TableField<Record, String> INDEX_NAME = createField(DSL.name("index_name"), SQLDataType.VARCHAR(64), this, "");

    private SchemaUnusedIndexes(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SchemaUnusedIndexes(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `schema_unused_indexes` as select `t`.`OBJECT_SCHEMA` AS `object_schema`,`t`.`OBJECT_NAME` AS `object_name`,`t`.`INDEX_NAME` AS `index_name` from (`performance_schema`.`table_io_waits_summary_by_index_usage` `t` join `information_schema`.`STATISTICS` `s` on(((`t`.`OBJECT_SCHEMA` = `information_schema`.`s`.`TABLE_SCHEMA`) and (`t`.`OBJECT_NAME` = `information_schema`.`s`.`TABLE_NAME`) and (`t`.`INDEX_NAME` = `information_schema`.`s`.`INDEX_NAME`)))) where ((`t`.`INDEX_NAME` is not null) and (`t`.`COUNT_STAR` = 0) and (`t`.`OBJECT_SCHEMA` <> 'mysql') and (`t`.`INDEX_NAME` <> 'PRIMARY') and (`information_schema`.`s`.`NON_UNIQUE` = 1) and (`information_schema`.`s`.`SEQ_IN_INDEX` = 1)) order by `t`.`OBJECT_SCHEMA`,`t`.`OBJECT_NAME`"));
    }

    /**
     * Create an aliased <code>sys.schema_unused_indexes</code> table reference
     */
    public SchemaUnusedIndexes(String alias) {
        this(DSL.name(alias), SCHEMA_UNUSED_INDEXES);
    }

    /**
     * Create an aliased <code>sys.schema_unused_indexes</code> table reference
     */
    public SchemaUnusedIndexes(Name alias) {
        this(alias, SCHEMA_UNUSED_INDEXES);
    }

    /**
     * Create a <code>sys.schema_unused_indexes</code> table reference
     */
    public SchemaUnusedIndexes() {
        this(DSL.name("schema_unused_indexes"), null);
    }

    public <O extends Record> SchemaUnusedIndexes(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SCHEMA_UNUSED_INDEXES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public SchemaUnusedIndexes as(String alias) {
        return new SchemaUnusedIndexes(DSL.name(alias), this);
    }

    @Override
    public SchemaUnusedIndexes as(Name alias) {
        return new SchemaUnusedIndexes(alias, this);
    }

    @Override
    public SchemaUnusedIndexes as(Table<?> alias) {
        return new SchemaUnusedIndexes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaUnusedIndexes rename(String name) {
        return new SchemaUnusedIndexes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaUnusedIndexes rename(Name name) {
        return new SchemaUnusedIndexes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaUnusedIndexes rename(Table<?> name) {
        return new SchemaUnusedIndexes(name.getQualifiedName(), null);
    }
}
