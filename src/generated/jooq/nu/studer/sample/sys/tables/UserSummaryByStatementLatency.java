/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import java.math.BigInteger;

import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSummaryByStatementLatency extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sys.user_summary_by_statement_latency</code>
     */
    public static final UserSummaryByStatementLatency USER_SUMMARY_BY_STATEMENT_LATENCY = new UserSummaryByStatementLatency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.user_summary_by_statement_latency.user</code>.
     */
    public final TableField<Record, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_latency.total</code>.
     */
    public final TableField<Record, BigInteger> TOTAL = createField(DSL.name("total"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column
     * <code>sys.user_summary_by_statement_latency.total_latency</code>.
     */
    public final TableField<Record, String> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column
     * <code>sys.user_summary_by_statement_latency.max_latency</code>.
     */
    public final TableField<Record, String> MAX_LATENCY = createField(DSL.name("max_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column
     * <code>sys.user_summary_by_statement_latency.lock_latency</code>.
     */
    public final TableField<Record, String> LOCK_LATENCY = createField(DSL.name("lock_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column
     * <code>sys.user_summary_by_statement_latency.cpu_latency</code>.
     */
    public final TableField<Record, String> CPU_LATENCY = createField(DSL.name("cpu_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_latency.rows_sent</code>.
     */
    public final TableField<Record, BigInteger> ROWS_SENT = createField(DSL.name("rows_sent"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column
     * <code>sys.user_summary_by_statement_latency.rows_examined</code>.
     */
    public final TableField<Record, BigInteger> ROWS_EXAMINED = createField(DSL.name("rows_examined"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column
     * <code>sys.user_summary_by_statement_latency.rows_affected</code>.
     */
    public final TableField<Record, BigInteger> ROWS_AFFECTED = createField(DSL.name("rows_affected"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.user_summary_by_statement_latency.full_scans</code>.
     */
    public final TableField<Record, BigInteger> FULL_SCANS = createField(DSL.name("full_scans"), SQLDataType.DECIMAL_INTEGER(43), this, "");

    private UserSummaryByStatementLatency(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private UserSummaryByStatementLatency(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `user_summary_by_statement_latency` as select if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) AS `user`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`COUNT_STAR`) AS `total`,format_pico_time(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`)) AS `total_latency`,format_pico_time(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`MAX_TIMER_WAIT`)) AS `max_latency`,format_pico_time(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_LOCK_TIME`)) AS `lock_latency`,format_pico_time(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_CPU_TIME`)) AS `cpu_latency`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_SENT`) AS `rows_sent`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_EXAMINED`) AS `rows_examined`,sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_ROWS_AFFECTED`) AS `rows_affected`,(sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_INDEX_USED`) + sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_NO_GOOD_INDEX_USED`)) AS `full_scans` from `performance_schema`.`events_statements_summary_by_user_by_event_name` group by if((`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER` is null),'background',`performance_schema`.`events_statements_summary_by_user_by_event_name`.`USER`) order by sum(`performance_schema`.`events_statements_summary_by_user_by_event_name`.`SUM_TIMER_WAIT`) desc"));
    }

    /**
     * Create an aliased <code>sys.user_summary_by_statement_latency</code>
     * table reference
     */
    public UserSummaryByStatementLatency(String alias) {
        this(DSL.name(alias), USER_SUMMARY_BY_STATEMENT_LATENCY);
    }

    /**
     * Create an aliased <code>sys.user_summary_by_statement_latency</code>
     * table reference
     */
    public UserSummaryByStatementLatency(Name alias) {
        this(alias, USER_SUMMARY_BY_STATEMENT_LATENCY);
    }

    /**
     * Create a <code>sys.user_summary_by_statement_latency</code> table
     * reference
     */
    public UserSummaryByStatementLatency() {
        this(DSL.name("user_summary_by_statement_latency"), null);
    }

    public <O extends Record> UserSummaryByStatementLatency(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, USER_SUMMARY_BY_STATEMENT_LATENCY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public UserSummaryByStatementLatency as(String alias) {
        return new UserSummaryByStatementLatency(DSL.name(alias), this);
    }

    @Override
    public UserSummaryByStatementLatency as(Name alias) {
        return new UserSummaryByStatementLatency(alias, this);
    }

    @Override
    public UserSummaryByStatementLatency as(Table<?> alias) {
        return new UserSummaryByStatementLatency(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSummaryByStatementLatency rename(String name) {
        return new UserSummaryByStatementLatency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSummaryByStatementLatency rename(Name name) {
        return new UserSummaryByStatementLatency(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSummaryByStatementLatency rename(Table<?> name) {
        return new UserSummaryByStatementLatency(name.getQualifiedName(), null);
    }
}
