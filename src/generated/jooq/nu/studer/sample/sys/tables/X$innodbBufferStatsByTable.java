/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import java.math.BigInteger;

import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$innodbBufferStatsByTable extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.x$innodb_buffer_stats_by_table</code>
     */
    public static final X$innodbBufferStatsByTable X$INNODB_BUFFER_STATS_BY_TABLE = new X$innodbBufferStatsByTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.object_schema</code>.
     */
    public final TableField<Record, String> OBJECT_SCHEMA = createField(DSL.name("object_schema"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.object_name</code>.
     */
    public final TableField<Record, String> OBJECT_NAME = createField(DSL.name("object_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.allocated</code>.
     */
    public final TableField<Record, BigInteger> ALLOCATED = createField(DSL.name("allocated"), SQLDataType.DECIMAL_INTEGER(44), this, "");

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.data</code>.
     */
    public final TableField<Record, BigInteger> DATA = createField(DSL.name("data"), SQLDataType.DECIMAL_INTEGER(44), this, "");

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.pages</code>.
     */
    public final TableField<Record, Long> PAGES = createField(DSL.name("pages"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.pages_hashed</code>.
     */
    public final TableField<Record, Long> PAGES_HASHED = createField(DSL.name("pages_hashed"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.pages_old</code>.
     */
    public final TableField<Record, Long> PAGES_OLD = createField(DSL.name("pages_old"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.x$innodb_buffer_stats_by_table.rows_cached</code>.
     */
    public final TableField<Record, BigInteger> ROWS_CACHED = createField(DSL.name("rows_cached"), SQLDataType.DECIMAL_INTEGER(45).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    private X$innodbBufferStatsByTable(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private X$innodbBufferStatsByTable(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `x$innodb_buffer_stats_by_table` as select if((locate('.',`ibp`.`TABLE_NAME`) = 0),'InnoDB System',replace(substring_index(`ibp`.`TABLE_NAME`,'.',1),'`','')) AS `object_schema`,replace(substring_index(`ibp`.`TABLE_NAME`,'.',-(1)),'`','') AS `object_name`,sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) AS `allocated`,sum(`ibp`.`DATA_SIZE`) AS `data`,count(`ibp`.`PAGE_NUMBER`) AS `pages`,count(if((`ibp`.`IS_HASHED` = 'YES'),1,NULL)) AS `pages_hashed`,count(if((`ibp`.`IS_OLD` = 'YES'),1,NULL)) AS `pages_old`,round(ifnull((sum(`ibp`.`NUMBER_RECORDS`) / nullif(count(distinct `ibp`.`INDEX_NAME`),0)),0),0) AS `rows_cached` from `information_schema`.`INNODB_BUFFER_PAGE` `ibp` where (`ibp`.`TABLE_NAME` is not null) group by `object_schema`,`object_name` order by sum(if((`ibp`.`COMPRESSED_SIZE` = 0),16384,`ibp`.`COMPRESSED_SIZE`)) desc"));
    }

    /**
     * Create an aliased <code>sys.x$innodb_buffer_stats_by_table</code> table
     * reference
     */
    public X$innodbBufferStatsByTable(String alias) {
        this(DSL.name(alias), X$INNODB_BUFFER_STATS_BY_TABLE);
    }

    /**
     * Create an aliased <code>sys.x$innodb_buffer_stats_by_table</code> table
     * reference
     */
    public X$innodbBufferStatsByTable(Name alias) {
        this(alias, X$INNODB_BUFFER_STATS_BY_TABLE);
    }

    /**
     * Create a <code>sys.x$innodb_buffer_stats_by_table</code> table reference
     */
    public X$innodbBufferStatsByTable() {
        this(DSL.name("x$innodb_buffer_stats_by_table"), null);
    }

    public <O extends Record> X$innodbBufferStatsByTable(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, X$INNODB_BUFFER_STATS_BY_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public X$innodbBufferStatsByTable as(String alias) {
        return new X$innodbBufferStatsByTable(DSL.name(alias), this);
    }

    @Override
    public X$innodbBufferStatsByTable as(Name alias) {
        return new X$innodbBufferStatsByTable(alias, this);
    }

    @Override
    public X$innodbBufferStatsByTable as(Table<?> alias) {
        return new X$innodbBufferStatsByTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$innodbBufferStatsByTable rename(String name) {
        return new X$innodbBufferStatsByTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$innodbBufferStatsByTable rename(Name name) {
        return new X$innodbBufferStatsByTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$innodbBufferStatsByTable rename(Table<?> name) {
        return new X$innodbBufferStatsByTable(name.getQualifiedName(), null);
    }
}
