/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import java.math.BigInteger;
import java.time.LocalDateTime;

import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatementsWithFullTableScans extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sys.statements_with_full_table_scans</code>
     */
    public static final StatementsWithFullTableScans STATEMENTS_WITH_FULL_TABLE_SCANS = new StatementsWithFullTableScans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.statements_with_full_table_scans.query</code>.
     */
    public final TableField<Record, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.db</code>.
     */
    public final TableField<Record, String> DB = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.exec_count</code>.
     */
    public final TableField<Record, ULong> EXEC_COUNT = createField(DSL.name("exec_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>sys.statements_with_full_table_scans.total_latency</code>.
     */
    public final TableField<Record, String> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column
     * <code>sys.statements_with_full_table_scans.no_index_used_count</code>.
     */
    public final TableField<Record, ULong> NO_INDEX_USED_COUNT = createField(DSL.name("no_index_used_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>sys.statements_with_full_table_scans.no_good_index_used_count</code>.
     */
    public final TableField<Record, ULong> NO_GOOD_INDEX_USED_COUNT = createField(DSL.name("no_good_index_used_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>sys.statements_with_full_table_scans.no_index_used_pct</code>.
     */
    public final TableField<Record, BigInteger> NO_INDEX_USED_PCT = createField(DSL.name("no_index_used_pct"), SQLDataType.DECIMAL_INTEGER(24).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.rows_sent</code>.
     */
    public final TableField<Record, ULong> ROWS_SENT = createField(DSL.name("rows_sent"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>sys.statements_with_full_table_scans.rows_examined</code>.
     */
    public final TableField<Record, ULong> ROWS_EXAMINED = createField(DSL.name("rows_examined"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>sys.statements_with_full_table_scans.rows_sent_avg</code>.
     */
    public final TableField<Record, BigInteger> ROWS_SENT_AVG = createField(DSL.name("rows_sent_avg"), SQLDataType.DECIMAL_INTEGER(21), this, "");

    /**
     * The column
     * <code>sys.statements_with_full_table_scans.rows_examined_avg</code>.
     */
    public final TableField<Record, BigInteger> ROWS_EXAMINED_AVG = createField(DSL.name("rows_examined_avg"), SQLDataType.DECIMAL_INTEGER(21), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.first_seen</code>.
     */
    public final TableField<Record, LocalDateTime> FIRST_SEEN = createField(DSL.name("first_seen"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.last_seen</code>.
     */
    public final TableField<Record, LocalDateTime> LAST_SEEN = createField(DSL.name("last_seen"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.digest</code>.
     */
    public final TableField<Record, String> DIGEST = createField(DSL.name("digest"), SQLDataType.VARCHAR(64), this, "");

    private StatementsWithFullTableScans(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private StatementsWithFullTableScans(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `statements_with_full_table_scans` as select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` AS `no_index_used_count`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` AS `no_good_index_used_count`,round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100),0) AS `no_index_used_pct`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` AS `rows_sent`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` AS `rows_examined`,round((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_SENT` / `performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`),0) AS `rows_sent_avg`,round((`performance_schema`.`events_statements_summary_by_digest`.`SUM_ROWS_EXAMINED` / `performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`),0) AS `rows_examined_avg`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` > 0) or (`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_GOOD_INDEX_USED` > 0)) and (not((`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT` like 'SHOW%')))) order by round((ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_NO_INDEX_USED` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0) * 100),0) desc,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) desc"));
    }

    /**
     * Create an aliased <code>sys.statements_with_full_table_scans</code> table
     * reference
     */
    public StatementsWithFullTableScans(String alias) {
        this(DSL.name(alias), STATEMENTS_WITH_FULL_TABLE_SCANS);
    }

    /**
     * Create an aliased <code>sys.statements_with_full_table_scans</code> table
     * reference
     */
    public StatementsWithFullTableScans(Name alias) {
        this(alias, STATEMENTS_WITH_FULL_TABLE_SCANS);
    }

    /**
     * Create a <code>sys.statements_with_full_table_scans</code> table
     * reference
     */
    public StatementsWithFullTableScans() {
        this(DSL.name("statements_with_full_table_scans"), null);
    }

    public <O extends Record> StatementsWithFullTableScans(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, STATEMENTS_WITH_FULL_TABLE_SCANS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public StatementsWithFullTableScans as(String alias) {
        return new StatementsWithFullTableScans(DSL.name(alias), this);
    }

    @Override
    public StatementsWithFullTableScans as(Name alias) {
        return new StatementsWithFullTableScans(alias, this);
    }

    @Override
    public StatementsWithFullTableScans as(Table<?> alias) {
        return new StatementsWithFullTableScans(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithFullTableScans rename(String name) {
        return new StatementsWithFullTableScans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithFullTableScans rename(Name name) {
        return new StatementsWithFullTableScans(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithFullTableScans rename(Table<?> name) {
        return new StatementsWithFullTableScans(name.getQualifiedName(), null);
    }
}
