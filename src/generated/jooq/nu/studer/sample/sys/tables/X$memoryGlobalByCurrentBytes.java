/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import java.math.BigDecimal;

import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$memoryGlobalByCurrentBytes extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sys.x$memory_global_by_current_bytes</code>
     */
    public static final X$memoryGlobalByCurrentBytes X$MEMORY_GLOBAL_BY_CURRENT_BYTES = new X$memoryGlobalByCurrentBytes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.x$memory_global_by_current_bytes.event_name</code>.
     */
    public final TableField<Record, String> EVENT_NAME = createField(DSL.name("event_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column
     * <code>sys.x$memory_global_by_current_bytes.current_count</code>.
     */
    public final TableField<Record, Long> CURRENT_COUNT = createField(DSL.name("current_count"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>sys.x$memory_global_by_current_bytes.current_alloc</code>.
     */
    public final TableField<Record, Long> CURRENT_ALLOC = createField(DSL.name("current_alloc"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>sys.x$memory_global_by_current_bytes.current_avg_alloc</code>.
     */
    public final TableField<Record, BigDecimal> CURRENT_AVG_ALLOC = createField(DSL.name("current_avg_alloc"), SQLDataType.DECIMAL(23, 4).nullable(false).defaultValue(DSL.inline("0.0000", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sys.x$memory_global_by_current_bytes.high_count</code>.
     */
    public final TableField<Record, Long> HIGH_COUNT = createField(DSL.name("high_count"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sys.x$memory_global_by_current_bytes.high_alloc</code>.
     */
    public final TableField<Record, Long> HIGH_ALLOC = createField(DSL.name("high_alloc"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>sys.x$memory_global_by_current_bytes.high_avg_alloc</code>.
     */
    public final TableField<Record, BigDecimal> HIGH_AVG_ALLOC = createField(DSL.name("high_avg_alloc"), SQLDataType.DECIMAL(23, 4).nullable(false).defaultValue(DSL.inline("0.0000", SQLDataType.DECIMAL)), this, "");

    private X$memoryGlobalByCurrentBytes(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private X$memoryGlobalByCurrentBytes(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `x$memory_global_by_current_bytes` as select `performance_schema`.`memory_summary_global_by_event_name`.`EVENT_NAME` AS `event_name`,`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_COUNT_USED` AS `current_count`,`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` AS `current_alloc`,ifnull((`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` / nullif(`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_COUNT_USED`,0)),0) AS `current_avg_alloc`,`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_COUNT_USED` AS `high_count`,`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_NUMBER_OF_BYTES_USED` AS `high_alloc`,ifnull((`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_NUMBER_OF_BYTES_USED` / nullif(`performance_schema`.`memory_summary_global_by_event_name`.`HIGH_COUNT_USED`,0)),0) AS `high_avg_alloc` from `performance_schema`.`memory_summary_global_by_event_name` where (`performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` > 0) order by `performance_schema`.`memory_summary_global_by_event_name`.`CURRENT_NUMBER_OF_BYTES_USED` desc"));
    }

    /**
     * Create an aliased <code>sys.x$memory_global_by_current_bytes</code> table
     * reference
     */
    public X$memoryGlobalByCurrentBytes(String alias) {
        this(DSL.name(alias), X$MEMORY_GLOBAL_BY_CURRENT_BYTES);
    }

    /**
     * Create an aliased <code>sys.x$memory_global_by_current_bytes</code> table
     * reference
     */
    public X$memoryGlobalByCurrentBytes(Name alias) {
        this(alias, X$MEMORY_GLOBAL_BY_CURRENT_BYTES);
    }

    /**
     * Create a <code>sys.x$memory_global_by_current_bytes</code> table
     * reference
     */
    public X$memoryGlobalByCurrentBytes() {
        this(DSL.name("x$memory_global_by_current_bytes"), null);
    }

    public <O extends Record> X$memoryGlobalByCurrentBytes(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, X$MEMORY_GLOBAL_BY_CURRENT_BYTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public X$memoryGlobalByCurrentBytes as(String alias) {
        return new X$memoryGlobalByCurrentBytes(DSL.name(alias), this);
    }

    @Override
    public X$memoryGlobalByCurrentBytes as(Name alias) {
        return new X$memoryGlobalByCurrentBytes(alias, this);
    }

    @Override
    public X$memoryGlobalByCurrentBytes as(Table<?> alias) {
        return new X$memoryGlobalByCurrentBytes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$memoryGlobalByCurrentBytes rename(String name) {
        return new X$memoryGlobalByCurrentBytes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$memoryGlobalByCurrentBytes rename(Name name) {
        return new X$memoryGlobalByCurrentBytes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$memoryGlobalByCurrentBytes rename(Table<?> name) {
        return new X$memoryGlobalByCurrentBytes(name.getQualifiedName(), null);
    }
}
