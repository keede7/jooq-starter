/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$schemaTablesWithFullTableScans extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sys.x$schema_tables_with_full_table_scans</code>
     */
    public static final X$schemaTablesWithFullTableScans X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS = new X$schemaTablesWithFullTableScans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>sys.x$schema_tables_with_full_table_scans.object_schema</code>.
     */
    public final TableField<Record, String> OBJECT_SCHEMA = createField(DSL.name("object_schema"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>sys.x$schema_tables_with_full_table_scans.object_name</code>.
     */
    public final TableField<Record, String> OBJECT_NAME = createField(DSL.name("object_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>sys.x$schema_tables_with_full_table_scans.rows_full_scanned</code>.
     */
    public final TableField<Record, ULong> ROWS_FULL_SCANNED = createField(DSL.name("rows_full_scanned"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>sys.x$schema_tables_with_full_table_scans.latency</code>.
     */
    public final TableField<Record, ULong> LATENCY = createField(DSL.name("latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private X$schemaTablesWithFullTableScans(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private X$schemaTablesWithFullTableScans(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `x$schema_tables_with_full_table_scans` as select `performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_SCHEMA` AS `object_schema`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`OBJECT_NAME` AS `object_name`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` AS `rows_full_scanned`,`performance_schema`.`table_io_waits_summary_by_index_usage`.`SUM_TIMER_WAIT` AS `latency` from `performance_schema`.`table_io_waits_summary_by_index_usage` where ((`performance_schema`.`table_io_waits_summary_by_index_usage`.`INDEX_NAME` is null) and (`performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` > 0)) order by `performance_schema`.`table_io_waits_summary_by_index_usage`.`COUNT_READ` desc"));
    }

    /**
     * Create an aliased <code>sys.x$schema_tables_with_full_table_scans</code>
     * table reference
     */
    public X$schemaTablesWithFullTableScans(String alias) {
        this(DSL.name(alias), X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS);
    }

    /**
     * Create an aliased <code>sys.x$schema_tables_with_full_table_scans</code>
     * table reference
     */
    public X$schemaTablesWithFullTableScans(Name alias) {
        this(alias, X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS);
    }

    /**
     * Create a <code>sys.x$schema_tables_with_full_table_scans</code> table
     * reference
     */
    public X$schemaTablesWithFullTableScans() {
        this(DSL.name("x$schema_tables_with_full_table_scans"), null);
    }

    public <O extends Record> X$schemaTablesWithFullTableScans(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, X$SCHEMA_TABLES_WITH_FULL_TABLE_SCANS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public X$schemaTablesWithFullTableScans as(String alias) {
        return new X$schemaTablesWithFullTableScans(DSL.name(alias), this);
    }

    @Override
    public X$schemaTablesWithFullTableScans as(Name alias) {
        return new X$schemaTablesWithFullTableScans(alias, this);
    }

    @Override
    public X$schemaTablesWithFullTableScans as(Table<?> alias) {
        return new X$schemaTablesWithFullTableScans(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$schemaTablesWithFullTableScans rename(String name) {
        return new X$schemaTablesWithFullTableScans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$schemaTablesWithFullTableScans rename(Name name) {
        return new X$schemaTablesWithFullTableScans(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$schemaTablesWithFullTableScans rename(Table<?> name) {
        return new X$schemaTablesWithFullTableScans(name.getQualifiedName(), null);
    }
}
