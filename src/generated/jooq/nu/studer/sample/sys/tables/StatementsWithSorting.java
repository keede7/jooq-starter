/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import java.math.BigInteger;
import java.time.LocalDateTime;

import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatementsWithSorting extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.statements_with_sorting</code>
     */
    public static final StatementsWithSorting STATEMENTS_WITH_SORTING = new StatementsWithSorting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.statements_with_sorting.query</code>.
     */
    public final TableField<Record, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.statements_with_sorting.db</code>.
     */
    public final TableField<Record, String> DB = createField(DSL.name("db"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statements_with_sorting.exec_count</code>.
     */
    public final TableField<Record, ULong> EXEC_COUNT = createField(DSL.name("exec_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_sorting.total_latency</code>.
     */
    public final TableField<Record, String> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statements_with_sorting.sort_merge_passes</code>.
     */
    public final TableField<Record, ULong> SORT_MERGE_PASSES = createField(DSL.name("sort_merge_passes"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_sorting.avg_sort_merges</code>.
     */
    public final TableField<Record, BigInteger> AVG_SORT_MERGES = createField(DSL.name("avg_sort_merges"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_sorting.sorts_using_scans</code>.
     */
    public final TableField<Record, ULong> SORTS_USING_SCANS = createField(DSL.name("sorts_using_scans"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_sorting.sort_using_range</code>.
     */
    public final TableField<Record, ULong> SORT_USING_RANGE = createField(DSL.name("sort_using_range"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_sorting.rows_sorted</code>.
     */
    public final TableField<Record, ULong> ROWS_SORTED = createField(DSL.name("rows_sorted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_sorting.avg_rows_sorted</code>.
     */
    public final TableField<Record, BigInteger> AVG_ROWS_SORTED = createField(DSL.name("avg_rows_sorted"), SQLDataType.DECIMAL_INTEGER(21).nullable(false).defaultValue(DSL.inline("0", SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_sorting.first_seen</code>.
     */
    public final TableField<Record, LocalDateTime> FIRST_SEEN = createField(DSL.name("first_seen"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_sorting.last_seen</code>.
     */
    public final TableField<Record, LocalDateTime> LAST_SEEN = createField(DSL.name("last_seen"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_sorting.digest</code>.
     */
    public final TableField<Record, String> DIGEST = createField(DSL.name("digest"), SQLDataType.VARCHAR(64), this, "");

    private StatementsWithSorting(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private StatementsWithSorting(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `statements_with_sorting` as select `sys`.`format_statement`(`performance_schema`.`events_statements_summary_by_digest`.`DIGEST_TEXT`) AS `query`,`performance_schema`.`events_statements_summary_by_digest`.`SCHEMA_NAME` AS `db`,`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR` AS `exec_count`,format_pico_time(`performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT`) AS `total_latency`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` AS `sort_merge_passes`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_MERGE_PASSES` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_sort_merges`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_SCAN` AS `sorts_using_scans`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_RANGE` AS `sort_using_range`,`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` AS `rows_sorted`,round(ifnull((`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` / nullif(`performance_schema`.`events_statements_summary_by_digest`.`COUNT_STAR`,0)),0),0) AS `avg_rows_sorted`,`performance_schema`.`events_statements_summary_by_digest`.`FIRST_SEEN` AS `first_seen`,`performance_schema`.`events_statements_summary_by_digest`.`LAST_SEEN` AS `last_seen`,`performance_schema`.`events_statements_summary_by_digest`.`DIGEST` AS `digest` from `performance_schema`.`events_statements_summary_by_digest` where (`performance_schema`.`events_statements_summary_by_digest`.`SUM_SORT_ROWS` > 0) order by `performance_schema`.`events_statements_summary_by_digest`.`SUM_TIMER_WAIT` desc"));
    }

    /**
     * Create an aliased <code>sys.statements_with_sorting</code> table
     * reference
     */
    public StatementsWithSorting(String alias) {
        this(DSL.name(alias), STATEMENTS_WITH_SORTING);
    }

    /**
     * Create an aliased <code>sys.statements_with_sorting</code> table
     * reference
     */
    public StatementsWithSorting(Name alias) {
        this(alias, STATEMENTS_WITH_SORTING);
    }

    /**
     * Create a <code>sys.statements_with_sorting</code> table reference
     */
    public StatementsWithSorting() {
        this(DSL.name("statements_with_sorting"), null);
    }

    public <O extends Record> StatementsWithSorting(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, STATEMENTS_WITH_SORTING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public StatementsWithSorting as(String alias) {
        return new StatementsWithSorting(DSL.name(alias), this);
    }

    @Override
    public StatementsWithSorting as(Name alias) {
        return new StatementsWithSorting(alias, this);
    }

    @Override
    public StatementsWithSorting as(Table<?> alias) {
        return new StatementsWithSorting(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithSorting rename(String name) {
        return new StatementsWithSorting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithSorting rename(Name name) {
        return new StatementsWithSorting(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithSorting rename(Table<?> name) {
        return new StatementsWithSorting(name.getQualifiedName(), null);
    }
}
