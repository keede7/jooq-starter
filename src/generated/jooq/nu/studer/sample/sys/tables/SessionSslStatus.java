/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionSslStatus extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.session_ssl_status</code>
     */
    public static final SessionSslStatus SESSION_SSL_STATUS = new SessionSslStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.session_ssl_status.thread_id</code>.
     */
    public final TableField<Record, ULong> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.session_ssl_status.ssl_version</code>.
     */
    public final TableField<Record, String> SSL_VERSION = createField(DSL.name("ssl_version"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>sys.session_ssl_status.ssl_cipher</code>.
     */
    public final TableField<Record, String> SSL_CIPHER = createField(DSL.name("ssl_cipher"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>sys.session_ssl_status.ssl_sessions_reused</code>.
     */
    public final TableField<Record, String> SSL_SESSIONS_REUSED = createField(DSL.name("ssl_sessions_reused"), SQLDataType.VARCHAR(1024), this, "");

    private SessionSslStatus(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SessionSslStatus(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `session_ssl_status` as select `sslver`.`THREAD_ID` AS `thread_id`,`sslver`.`VARIABLE_VALUE` AS `ssl_version`,`sslcip`.`VARIABLE_VALUE` AS `ssl_cipher`,`sslreuse`.`VARIABLE_VALUE` AS `ssl_sessions_reused` from ((`performance_schema`.`status_by_thread` `sslver` left join `performance_schema`.`status_by_thread` `sslcip` on(((`sslcip`.`THREAD_ID` = `sslver`.`THREAD_ID`) and (`sslcip`.`VARIABLE_NAME` = 'Ssl_cipher')))) left join `performance_schema`.`status_by_thread` `sslreuse` on(((`sslreuse`.`THREAD_ID` = `sslver`.`THREAD_ID`) and (`sslreuse`.`VARIABLE_NAME` = 'Ssl_sessions_reused')))) where (`sslver`.`VARIABLE_NAME` = 'Ssl_version')"));
    }

    /**
     * Create an aliased <code>sys.session_ssl_status</code> table reference
     */
    public SessionSslStatus(String alias) {
        this(DSL.name(alias), SESSION_SSL_STATUS);
    }

    /**
     * Create an aliased <code>sys.session_ssl_status</code> table reference
     */
    public SessionSslStatus(Name alias) {
        this(alias, SESSION_SSL_STATUS);
    }

    /**
     * Create a <code>sys.session_ssl_status</code> table reference
     */
    public SessionSslStatus() {
        this(DSL.name("session_ssl_status"), null);
    }

    public <O extends Record> SessionSslStatus(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SESSION_SSL_STATUS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public SessionSslStatus as(String alias) {
        return new SessionSslStatus(DSL.name(alias), this);
    }

    @Override
    public SessionSslStatus as(Name alias) {
        return new SessionSslStatus(alias, this);
    }

    @Override
    public SessionSslStatus as(Table<?> alias) {
        return new SessionSslStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionSslStatus rename(String name) {
        return new SessionSslStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionSslStatus rename(Name name) {
        return new SessionSslStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SessionSslStatus rename(Table<?> name) {
        return new SessionSslStatus(name.getQualifiedName(), null);
    }
}
