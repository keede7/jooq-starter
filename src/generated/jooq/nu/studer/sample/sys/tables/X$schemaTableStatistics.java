/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import java.math.BigInteger;

import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$schemaTableStatistics extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.x$schema_table_statistics</code>
     */
    public static final X$schemaTableStatistics X$SCHEMA_TABLE_STATISTICS = new X$schemaTableStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.x$schema_table_statistics.table_schema</code>.
     */
    public final TableField<Record, String> TABLE_SCHEMA = createField(DSL.name("table_schema"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.table_name</code>.
     */
    public final TableField<Record, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.total_latency</code>.
     */
    public final TableField<Record, ULong> TOTAL_LATENCY = createField(DSL.name("total_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.rows_fetched</code>.
     */
    public final TableField<Record, ULong> ROWS_FETCHED = createField(DSL.name("rows_fetched"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.fetch_latency</code>.
     */
    public final TableField<Record, ULong> FETCH_LATENCY = createField(DSL.name("fetch_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.rows_inserted</code>.
     */
    public final TableField<Record, ULong> ROWS_INSERTED = createField(DSL.name("rows_inserted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.insert_latency</code>.
     */
    public final TableField<Record, ULong> INSERT_LATENCY = createField(DSL.name("insert_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.rows_updated</code>.
     */
    public final TableField<Record, ULong> ROWS_UPDATED = createField(DSL.name("rows_updated"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.update_latency</code>.
     */
    public final TableField<Record, ULong> UPDATE_LATENCY = createField(DSL.name("update_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.rows_deleted</code>.
     */
    public final TableField<Record, ULong> ROWS_DELETED = createField(DSL.name("rows_deleted"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.delete_latency</code>.
     */
    public final TableField<Record, ULong> DELETE_LATENCY = createField(DSL.name("delete_latency"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_read_requests</code>.
     */
    public final TableField<Record, BigInteger> IO_READ_REQUESTS = createField(DSL.name("io_read_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_read</code>.
     */
    public final TableField<Record, BigInteger> IO_READ = createField(DSL.name("io_read"), SQLDataType.DECIMAL_INTEGER(41), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_read_latency</code>.
     */
    public final TableField<Record, BigInteger> IO_READ_LATENCY = createField(DSL.name("io_read_latency"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_write_requests</code>.
     */
    public final TableField<Record, BigInteger> IO_WRITE_REQUESTS = createField(DSL.name("io_write_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_write</code>.
     */
    public final TableField<Record, BigInteger> IO_WRITE = createField(DSL.name("io_write"), SQLDataType.DECIMAL_INTEGER(41), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_write_latency</code>.
     */
    public final TableField<Record, BigInteger> IO_WRITE_LATENCY = createField(DSL.name("io_write_latency"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_misc_requests</code>.
     */
    public final TableField<Record, BigInteger> IO_MISC_REQUESTS = createField(DSL.name("io_misc_requests"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    /**
     * The column <code>sys.x$schema_table_statistics.io_misc_latency</code>.
     */
    public final TableField<Record, BigInteger> IO_MISC_LATENCY = createField(DSL.name("io_misc_latency"), SQLDataType.DECIMAL_INTEGER(42), this, "");

    private X$schemaTableStatistics(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private X$schemaTableStatistics(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `x$schema_table_statistics` as select `pst`.`OBJECT_SCHEMA` AS `table_schema`,`pst`.`OBJECT_NAME` AS `table_name`,`pst`.`SUM_TIMER_WAIT` AS `total_latency`,`pst`.`COUNT_FETCH` AS `rows_fetched`,`pst`.`SUM_TIMER_FETCH` AS `fetch_latency`,`pst`.`COUNT_INSERT` AS `rows_inserted`,`pst`.`SUM_TIMER_INSERT` AS `insert_latency`,`pst`.`COUNT_UPDATE` AS `rows_updated`,`pst`.`SUM_TIMER_UPDATE` AS `update_latency`,`pst`.`COUNT_DELETE` AS `rows_deleted`,`pst`.`SUM_TIMER_DELETE` AS `delete_latency`,`sys`.`fsbi`.`count_read` AS `io_read_requests`,`sys`.`fsbi`.`sum_number_of_bytes_read` AS `io_read`,`sys`.`fsbi`.`sum_timer_read` AS `io_read_latency`,`sys`.`fsbi`.`count_write` AS `io_write_requests`,`sys`.`fsbi`.`sum_number_of_bytes_write` AS `io_write`,`sys`.`fsbi`.`sum_timer_write` AS `io_write_latency`,`sys`.`fsbi`.`count_misc` AS `io_misc_requests`,`sys`.`fsbi`.`sum_timer_misc` AS `io_misc_latency` from (`performance_schema`.`table_io_waits_summary_by_table` `pst` left join `sys`.`x$ps_schema_table_statistics_io` `fsbi` on(((`pst`.`OBJECT_SCHEMA` = `sys`.`fsbi`.`table_schema`) and (`pst`.`OBJECT_NAME` = `sys`.`fsbi`.`table_name`)))) order by `pst`.`SUM_TIMER_WAIT` desc"));
    }

    /**
     * Create an aliased <code>sys.x$schema_table_statistics</code> table
     * reference
     */
    public X$schemaTableStatistics(String alias) {
        this(DSL.name(alias), X$SCHEMA_TABLE_STATISTICS);
    }

    /**
     * Create an aliased <code>sys.x$schema_table_statistics</code> table
     * reference
     */
    public X$schemaTableStatistics(Name alias) {
        this(alias, X$SCHEMA_TABLE_STATISTICS);
    }

    /**
     * Create a <code>sys.x$schema_table_statistics</code> table reference
     */
    public X$schemaTableStatistics() {
        this(DSL.name("x$schema_table_statistics"), null);
    }

    public <O extends Record> X$schemaTableStatistics(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, X$SCHEMA_TABLE_STATISTICS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public X$schemaTableStatistics as(String alias) {
        return new X$schemaTableStatistics(DSL.name(alias), this);
    }

    @Override
    public X$schemaTableStatistics as(Name alias) {
        return new X$schemaTableStatistics(alias, this);
    }

    @Override
    public X$schemaTableStatistics as(Table<?> alias) {
        return new X$schemaTableStatistics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$schemaTableStatistics rename(String name) {
        return new X$schemaTableStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$schemaTableStatistics rename(Name name) {
        return new X$schemaTableStatistics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$schemaTableStatistics rename(Table<?> name) {
        return new X$schemaTableStatistics(name.getQualifiedName(), null);
    }
}
