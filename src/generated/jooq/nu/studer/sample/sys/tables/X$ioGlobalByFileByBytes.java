/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.sys.tables;


import java.math.BigDecimal;

import nu.studer.sample.sys.Sys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class X$ioGlobalByFileByBytes extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sys.x$io_global_by_file_by_bytes</code>
     */
    public static final X$ioGlobalByFileByBytes X$IO_GLOBAL_BY_FILE_BY_BYTES = new X$ioGlobalByFileByBytes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.file</code>.
     */
    public final TableField<Record, String> FILE = createField(DSL.name("file"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.count_read</code>.
     */
    public final TableField<Record, ULong> COUNT_READ = createField(DSL.name("count_read"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.total_read</code>.
     */
    public final TableField<Record, Long> TOTAL_READ = createField(DSL.name("total_read"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.avg_read</code>.
     */
    public final TableField<Record, BigDecimal> AVG_READ = createField(DSL.name("avg_read"), SQLDataType.DECIMAL(23, 4).nullable(false).defaultValue(DSL.inline("0.0000", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.count_write</code>.
     */
    public final TableField<Record, ULong> COUNT_WRITE = createField(DSL.name("count_write"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.total_written</code>.
     */
    public final TableField<Record, Long> TOTAL_WRITTEN = createField(DSL.name("total_written"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.avg_write</code>.
     */
    public final TableField<Record, BigDecimal> AVG_WRITE = createField(DSL.name("avg_write"), SQLDataType.DECIMAL(23, 4).nullable(false).defaultValue(DSL.inline("0.0000", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.total</code>.
     */
    public final TableField<Record, Long> TOTAL = createField(DSL.name("total"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>sys.x$io_global_by_file_by_bytes.write_pct</code>.
     */
    public final TableField<Record, BigDecimal> WRITE_PCT = createField(DSL.name("write_pct"), SQLDataType.DECIMAL(26, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    private X$ioGlobalByFileByBytes(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private X$ioGlobalByFileByBytes(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `x$io_global_by_file_by_bytes` as select `performance_schema`.`file_summary_by_instance`.`FILE_NAME` AS `file`,`performance_schema`.`file_summary_by_instance`.`COUNT_READ` AS `count_read`,`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` AS `total_read`,ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_READ`,0)),0) AS `avg_read`,`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE` AS `count_write`,`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` AS `total_written`,ifnull((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE` / nullif(`performance_schema`.`file_summary_by_instance`.`COUNT_WRITE`,0)),0.00) AS `avg_write`,(`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) AS `total`,ifnull(round((100 - ((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` / nullif((`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`),0)) * 100)),2),0.00) AS `write_pct` from `performance_schema`.`file_summary_by_instance` order by (`performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_READ` + `performance_schema`.`file_summary_by_instance`.`SUM_NUMBER_OF_BYTES_WRITE`) desc"));
    }

    /**
     * Create an aliased <code>sys.x$io_global_by_file_by_bytes</code> table
     * reference
     */
    public X$ioGlobalByFileByBytes(String alias) {
        this(DSL.name(alias), X$IO_GLOBAL_BY_FILE_BY_BYTES);
    }

    /**
     * Create an aliased <code>sys.x$io_global_by_file_by_bytes</code> table
     * reference
     */
    public X$ioGlobalByFileByBytes(Name alias) {
        this(alias, X$IO_GLOBAL_BY_FILE_BY_BYTES);
    }

    /**
     * Create a <code>sys.x$io_global_by_file_by_bytes</code> table reference
     */
    public X$ioGlobalByFileByBytes() {
        this(DSL.name("x$io_global_by_file_by_bytes"), null);
    }

    public <O extends Record> X$ioGlobalByFileByBytes(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, X$IO_GLOBAL_BY_FILE_BY_BYTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sys.SYS;
    }

    @Override
    public X$ioGlobalByFileByBytes as(String alias) {
        return new X$ioGlobalByFileByBytes(DSL.name(alias), this);
    }

    @Override
    public X$ioGlobalByFileByBytes as(Name alias) {
        return new X$ioGlobalByFileByBytes(alias, this);
    }

    @Override
    public X$ioGlobalByFileByBytes as(Table<?> alias) {
        return new X$ioGlobalByFileByBytes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public X$ioGlobalByFileByBytes rename(String name) {
        return new X$ioGlobalByFileByBytes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$ioGlobalByFileByBytes rename(Name name) {
        return new X$ioGlobalByFileByBytes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public X$ioGlobalByFileByBytes rename(Table<?> name) {
        return new X$ioGlobalByFileByBytes(name.getQualifiedName(), null);
    }
}
