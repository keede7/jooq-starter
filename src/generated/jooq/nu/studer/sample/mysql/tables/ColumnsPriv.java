/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables;


import java.time.LocalDateTime;

import nu.studer.sample.mysql.Keys;
import nu.studer.sample.mysql.Mysql;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Column privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColumnsPriv extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.columns_priv</code>
     */
    public static final ColumnsPriv COLUMNS_PRIV = new ColumnsPriv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>mysql.columns_priv.Host</code>.
     */
    public final TableField<Record, String> HOST = createField(DSL.name("Host"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Db</code>.
     */
    public final TableField<Record, String> DB = createField(DSL.name("Db"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.User</code>.
     */
    public final TableField<Record, String> USER = createField(DSL.name("User"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Table_name</code>.
     */
    public final TableField<Record, String> TABLE_NAME = createField(DSL.name("Table_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Column_name</code>.
     */
    public final TableField<Record, String> COLUMN_NAME = createField(DSL.name("Column_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Timestamp</code>.
     */
    public final TableField<Record, LocalDateTime> TIMESTAMP = createField(DSL.name("Timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.columns_priv.Column_priv</code>.
     */
    public final TableField<Record, String> COLUMN_PRIV = createField(DSL.name("Column_priv"), SQLDataType.VARCHAR(31).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private ColumnsPriv(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ColumnsPriv(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Column privileges"), TableOptions.table());
    }

    /**
     * Create an aliased <code>mysql.columns_priv</code> table reference
     */
    public ColumnsPriv(String alias) {
        this(DSL.name(alias), COLUMNS_PRIV);
    }

    /**
     * Create an aliased <code>mysql.columns_priv</code> table reference
     */
    public ColumnsPriv(Name alias) {
        this(alias, COLUMNS_PRIV);
    }

    /**
     * Create a <code>mysql.columns_priv</code> table reference
     */
    public ColumnsPriv() {
        this(DSL.name("columns_priv"), null);
    }

    public <O extends Record> ColumnsPriv(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, COLUMNS_PRIV);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_COLUMNS_PRIV_PRIMARY;
    }

    @Override
    public ColumnsPriv as(String alias) {
        return new ColumnsPriv(DSL.name(alias), this);
    }

    @Override
    public ColumnsPriv as(Name alias) {
        return new ColumnsPriv(alias, this);
    }

    @Override
    public ColumnsPriv as(Table<?> alias) {
        return new ColumnsPriv(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnsPriv rename(String name) {
        return new ColumnsPriv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnsPriv rename(Name name) {
        return new ColumnsPriv(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnsPriv rename(Table<?> name) {
        return new ColumnsPriv(name.getQualifiedName(), null);
    }
}
