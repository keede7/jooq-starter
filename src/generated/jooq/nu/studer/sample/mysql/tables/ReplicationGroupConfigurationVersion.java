/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables;


import nu.studer.sample.mysql.Keys;
import nu.studer.sample.mysql.Mysql;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * The group configuration version.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationGroupConfigurationVersion extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>mysql.replication_group_configuration_version</code>
     */
    public static final ReplicationGroupConfigurationVersion REPLICATION_GROUP_CONFIGURATION_VERSION = new ReplicationGroupConfigurationVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>mysql.replication_group_configuration_version.name</code>. The
     * configuration name.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(255).nullable(false), this, "The configuration name.");

    /**
     * The column
     * <code>mysql.replication_group_configuration_version.version</code>. The
     * version of the configuration name.
     */
    public final TableField<Record, ULong> VERSION = createField(DSL.name("version"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The version of the configuration name.");

    private ReplicationGroupConfigurationVersion(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationGroupConfigurationVersion(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The group configuration version."), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>mysql.replication_group_configuration_version</code> table
     * reference
     */
    public ReplicationGroupConfigurationVersion(String alias) {
        this(DSL.name(alias), REPLICATION_GROUP_CONFIGURATION_VERSION);
    }

    /**
     * Create an aliased
     * <code>mysql.replication_group_configuration_version</code> table
     * reference
     */
    public ReplicationGroupConfigurationVersion(Name alias) {
        this(alias, REPLICATION_GROUP_CONFIGURATION_VERSION);
    }

    /**
     * Create a <code>mysql.replication_group_configuration_version</code> table
     * reference
     */
    public ReplicationGroupConfigurationVersion() {
        this(DSL.name("replication_group_configuration_version"), null);
    }

    public <O extends Record> ReplicationGroupConfigurationVersion(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REPLICATION_GROUP_CONFIGURATION_VERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_REPLICATION_GROUP_CONFIGURATION_VERSION_PRIMARY;
    }

    @Override
    public ReplicationGroupConfigurationVersion as(String alias) {
        return new ReplicationGroupConfigurationVersion(DSL.name(alias), this);
    }

    @Override
    public ReplicationGroupConfigurationVersion as(Name alias) {
        return new ReplicationGroupConfigurationVersion(alias, this);
    }

    @Override
    public ReplicationGroupConfigurationVersion as(Table<?> alias) {
        return new ReplicationGroupConfigurationVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupConfigurationVersion rename(String name) {
        return new ReplicationGroupConfigurationVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupConfigurationVersion rename(Name name) {
        return new ReplicationGroupConfigurationVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupConfigurationVersion rename(Table<?> name) {
        return new ReplicationGroupConfigurationVersion(name.getQualifiedName(), null);
    }
}
