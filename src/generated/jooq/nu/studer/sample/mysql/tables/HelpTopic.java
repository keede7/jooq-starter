/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.mysql.Keys;
import nu.studer.sample.mysql.Mysql;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * help topics
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HelpTopic extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.help_topic</code>
     */
    public static final HelpTopic HELP_TOPIC = new HelpTopic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>mysql.help_topic.help_topic_id</code>.
     */
    public final TableField<Record, UInteger> HELP_TOPIC_ID = createField(DSL.name("help_topic_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.help_category_id</code>.
     */
    public final TableField<Record, UShort> HELP_CATEGORY_ID = createField(DSL.name("help_category_id"), SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.description</code>.
     */
    public final TableField<Record, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.example</code>.
     */
    public final TableField<Record, String> EXAMPLE = createField(DSL.name("example"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.url</code>.
     */
    public final TableField<Record, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    private HelpTopic(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private HelpTopic(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("help topics"), TableOptions.table());
    }

    /**
     * Create an aliased <code>mysql.help_topic</code> table reference
     */
    public HelpTopic(String alias) {
        this(DSL.name(alias), HELP_TOPIC);
    }

    /**
     * Create an aliased <code>mysql.help_topic</code> table reference
     */
    public HelpTopic(Name alias) {
        this(alias, HELP_TOPIC);
    }

    /**
     * Create a <code>mysql.help_topic</code> table reference
     */
    public HelpTopic() {
        this(DSL.name("help_topic"), null);
    }

    public <O extends Record> HelpTopic(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, HELP_TOPIC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_HELP_TOPIC_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HELP_TOPIC_NAME);
    }

    @Override
    public HelpTopic as(String alias) {
        return new HelpTopic(DSL.name(alias), this);
    }

    @Override
    public HelpTopic as(Name alias) {
        return new HelpTopic(alias, this);
    }

    @Override
    public HelpTopic as(Table<?> alias) {
        return new HelpTopic(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpTopic rename(String name) {
        return new HelpTopic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpTopic rename(Name name) {
        return new HelpTopic(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpTopic rename(Table<?> name) {
        return new HelpTopic(name.getQualifiedName(), null);
    }
}
