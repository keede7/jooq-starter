/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.mysql.tables;


import nu.studer.sample.mysql.Keys;
import nu.studer.sample.mysql.Mysql;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Master Information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveMasterInfo extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.slave_master_info</code>
     */
    public static final SlaveMasterInfo SLAVE_MASTER_INFO = new SlaveMasterInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>mysql.slave_master_info.Number_of_lines</code>. Number
     * of lines in the file.
     */
    public final TableField<Record, UInteger> NUMBER_OF_LINES = createField(DSL.name("Number_of_lines"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Number of lines in the file.");

    /**
     * The column <code>mysql.slave_master_info.Master_log_name</code>. The name
     * of the master binary log currently being read from the master.
     */
    public final TableField<Record, String> MASTER_LOG_NAME = createField(DSL.name("Master_log_name"), SQLDataType.CLOB.nullable(false), this, "The name of the master binary log currently being read from the master.");

    /**
     * The column <code>mysql.slave_master_info.Master_log_pos</code>. The
     * master log position of the last read event.
     */
    public final TableField<Record, ULong> MASTER_LOG_POS = createField(DSL.name("Master_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The master log position of the last read event.");

    /**
     * The column <code>mysql.slave_master_info.Host</code>. The host name of
     * the source.
     */
    public final TableField<Record, String> HOST = createField(DSL.name("Host"), SQLDataType.VARCHAR(255), this, "The host name of the source.");

    /**
     * The column <code>mysql.slave_master_info.User_name</code>. The user name
     * used to connect to the master.
     */
    public final TableField<Record, String> USER_NAME = createField(DSL.name("User_name"), SQLDataType.CLOB, this, "The user name used to connect to the master.");

    /**
     * The column <code>mysql.slave_master_info.User_password</code>. The
     * password used to connect to the master.
     */
    public final TableField<Record, String> USER_PASSWORD = createField(DSL.name("User_password"), SQLDataType.CLOB, this, "The password used to connect to the master.");

    /**
     * The column <code>mysql.slave_master_info.Port</code>. The network port
     * used to connect to the master.
     */
    public final TableField<Record, UInteger> PORT = createField(DSL.name("Port"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "The network port used to connect to the master.");

    /**
     * The column <code>mysql.slave_master_info.Connect_retry</code>. The period
     * (in seconds) that the slave will wait before trying to reconnect to the
     * master.
     */
    public final TableField<Record, UInteger> CONNECT_RETRY = createField(DSL.name("Connect_retry"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "The period (in seconds) that the slave will wait before trying to reconnect to the master.");

    /**
     * The column <code>mysql.slave_master_info.Enabled_ssl</code>. Indicates
     * whether the server supports SSL connections.
     */
    public final TableField<Record, Byte> ENABLED_SSL = createField(DSL.name("Enabled_ssl"), SQLDataType.TINYINT.nullable(false), this, "Indicates whether the server supports SSL connections.");

    /**
     * The column <code>mysql.slave_master_info.Ssl_ca</code>. The file used for
     * the Certificate Authority (CA) certificate.
     */
    public final TableField<Record, String> SSL_CA = createField(DSL.name("Ssl_ca"), SQLDataType.CLOB, this, "The file used for the Certificate Authority (CA) certificate.");

    /**
     * The column <code>mysql.slave_master_info.Ssl_capath</code>. The path to
     * the Certificate Authority (CA) certificates.
     */
    public final TableField<Record, String> SSL_CAPATH = createField(DSL.name("Ssl_capath"), SQLDataType.CLOB, this, "The path to the Certificate Authority (CA) certificates.");

    /**
     * The column <code>mysql.slave_master_info.Ssl_cert</code>. The name of the
     * SSL certificate file.
     */
    public final TableField<Record, String> SSL_CERT = createField(DSL.name("Ssl_cert"), SQLDataType.CLOB, this, "The name of the SSL certificate file.");

    /**
     * The column <code>mysql.slave_master_info.Ssl_cipher</code>. The name of
     * the cipher in use for the SSL connection.
     */
    public final TableField<Record, String> SSL_CIPHER = createField(DSL.name("Ssl_cipher"), SQLDataType.CLOB, this, "The name of the cipher in use for the SSL connection.");

    /**
     * The column <code>mysql.slave_master_info.Ssl_key</code>. The name of the
     * SSL key file.
     */
    public final TableField<Record, String> SSL_KEY = createField(DSL.name("Ssl_key"), SQLDataType.CLOB, this, "The name of the SSL key file.");

    /**
     * The column <code>mysql.slave_master_info.Ssl_verify_server_cert</code>.
     * Whether to verify the server certificate.
     */
    public final TableField<Record, Byte> SSL_VERIFY_SERVER_CERT = createField(DSL.name("Ssl_verify_server_cert"), SQLDataType.TINYINT.nullable(false), this, "Whether to verify the server certificate.");

    /**
     * The column <code>mysql.slave_master_info.Heartbeat</code>.
     */
    public final TableField<Record, Double> HEARTBEAT = createField(DSL.name("Heartbeat"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_master_info.Bind</code>. Displays which
     * interface is employed when connecting to the MySQL server
     */
    public final TableField<Record, String> BIND = createField(DSL.name("Bind"), SQLDataType.CLOB, this, "Displays which interface is employed when connecting to the MySQL server");

    /**
     * The column <code>mysql.slave_master_info.Ignored_server_ids</code>. The
     * number of server IDs to be ignored, followed by the actual server IDs
     */
    public final TableField<Record, String> IGNORED_SERVER_IDS = createField(DSL.name("Ignored_server_ids"), SQLDataType.CLOB, this, "The number of server IDs to be ignored, followed by the actual server IDs");

    /**
     * The column <code>mysql.slave_master_info.Uuid</code>. The master server
     * uuid.
     */
    public final TableField<Record, String> UUID = createField(DSL.name("Uuid"), SQLDataType.CLOB, this, "The master server uuid.");

    /**
     * The column <code>mysql.slave_master_info.Retry_count</code>. Number of
     * reconnect attempts, to the master, before giving up.
     */
    public final TableField<Record, ULong> RETRY_COUNT = createField(DSL.name("Retry_count"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Number of reconnect attempts, to the master, before giving up.");

    /**
     * The column <code>mysql.slave_master_info.Ssl_crl</code>. The file used
     * for the Certificate Revocation List (CRL)
     */
    public final TableField<Record, String> SSL_CRL = createField(DSL.name("Ssl_crl"), SQLDataType.CLOB, this, "The file used for the Certificate Revocation List (CRL)");

    /**
     * The column <code>mysql.slave_master_info.Ssl_crlpath</code>. The path
     * used for Certificate Revocation List (CRL) files
     */
    public final TableField<Record, String> SSL_CRLPATH = createField(DSL.name("Ssl_crlpath"), SQLDataType.CLOB, this, "The path used for Certificate Revocation List (CRL) files");

    /**
     * The column <code>mysql.slave_master_info.Enabled_auto_position</code>.
     * Indicates whether GTIDs will be used to retrieve events from the master.
     */
    public final TableField<Record, Byte> ENABLED_AUTO_POSITION = createField(DSL.name("Enabled_auto_position"), SQLDataType.TINYINT.nullable(false), this, "Indicates whether GTIDs will be used to retrieve events from the master.");

    /**
     * The column <code>mysql.slave_master_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public final TableField<Record, String> CHANNEL_NAME = createField(DSL.name("Channel_name"), SQLDataType.VARCHAR(64).nullable(false), this, "The channel on which the replica is connected to a source. Used in Multisource Replication");

    /**
     * The column <code>mysql.slave_master_info.Tls_version</code>. Tls version
     */
    public final TableField<Record, String> TLS_VERSION = createField(DSL.name("Tls_version"), SQLDataType.CLOB, this, "Tls version");

    /**
     * The column <code>mysql.slave_master_info.Public_key_path</code>. The file
     * containing public key of master server.
     */
    public final TableField<Record, String> PUBLIC_KEY_PATH = createField(DSL.name("Public_key_path"), SQLDataType.CLOB, this, "The file containing public key of master server.");

    /**
     * The column <code>mysql.slave_master_info.Get_public_key</code>.
     * Preference to get public key from master.
     */
    public final TableField<Record, Byte> GET_PUBLIC_KEY = createField(DSL.name("Get_public_key"), SQLDataType.TINYINT.nullable(false), this, "Preference to get public key from master.");

    /**
     * The column <code>mysql.slave_master_info.Network_namespace</code>.
     * Network namespace used for communication with the master server.
     */
    public final TableField<Record, String> NETWORK_NAMESPACE = createField(DSL.name("Network_namespace"), SQLDataType.CLOB, this, "Network namespace used for communication with the master server.");

    /**
     * The column
     * <code>mysql.slave_master_info.Master_compression_algorithm</code>.
     * Compression algorithm supported for data transfer between source and
     * replica.
     */
    public final TableField<Record, String> MASTER_COMPRESSION_ALGORITHM = createField(DSL.name("Master_compression_algorithm"), SQLDataType.VARCHAR(64).nullable(false), this, "Compression algorithm supported for data transfer between source and replica.");

    /**
     * The column
     * <code>mysql.slave_master_info.Master_zstd_compression_level</code>.
     * Compression level associated with zstd compression algorithm.
     */
    public final TableField<Record, UInteger> MASTER_ZSTD_COMPRESSION_LEVEL = createField(DSL.name("Master_zstd_compression_level"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Compression level associated with zstd compression algorithm.");

    /**
     * The column <code>mysql.slave_master_info.Tls_ciphersuites</code>.
     * Ciphersuites used for TLS 1.3 communication with the master server.
     */
    public final TableField<Record, String> TLS_CIPHERSUITES = createField(DSL.name("Tls_ciphersuites"), SQLDataType.CLOB, this, "Ciphersuites used for TLS 1.3 communication with the master server.");

    /**
     * The column
     * <code>mysql.slave_master_info.Source_connection_auto_failover</code>.
     * Indicates whether the channel connection failover is enabled.
     */
    public final TableField<Record, Byte> SOURCE_CONNECTION_AUTO_FAILOVER = createField(DSL.name("Source_connection_auto_failover"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Indicates whether the channel connection failover is enabled.");

    /**
     * The column <code>mysql.slave_master_info.Gtid_only</code>. Indicates if
     * this channel only uses GTIDs and does not persist positions.
     */
    public final TableField<Record, Byte> GTID_ONLY = createField(DSL.name("Gtid_only"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Indicates if this channel only uses GTIDs and does not persist positions.");

    private SlaveMasterInfo(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SlaveMasterInfo(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Master Information"), TableOptions.table());
    }

    /**
     * Create an aliased <code>mysql.slave_master_info</code> table reference
     */
    public SlaveMasterInfo(String alias) {
        this(DSL.name(alias), SLAVE_MASTER_INFO);
    }

    /**
     * Create an aliased <code>mysql.slave_master_info</code> table reference
     */
    public SlaveMasterInfo(Name alias) {
        this(alias, SLAVE_MASTER_INFO);
    }

    /**
     * Create a <code>mysql.slave_master_info</code> table reference
     */
    public SlaveMasterInfo() {
        this(DSL.name("slave_master_info"), null);
    }

    public <O extends Record> SlaveMasterInfo(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SLAVE_MASTER_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_SLAVE_MASTER_INFO_PRIMARY;
    }

    @Override
    public SlaveMasterInfo as(String alias) {
        return new SlaveMasterInfo(DSL.name(alias), this);
    }

    @Override
    public SlaveMasterInfo as(Name alias) {
        return new SlaveMasterInfo(alias, this);
    }

    @Override
    public SlaveMasterInfo as(Table<?> alias) {
        return new SlaveMasterInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SlaveMasterInfo rename(String name) {
        return new SlaveMasterInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlaveMasterInfo rename(Name name) {
        return new SlaveMasterInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SlaveMasterInfo rename(Table<?> name) {
        return new SlaveMasterInfo(name.getQualifiedName(), null);
    }
}
