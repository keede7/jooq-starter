/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import nu.studer.sample.performance_schema.Indexes;
import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.HostCacheHostValidated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HostCache extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.host_cache</code>
     */
    public static final HostCache HOST_CACHE = new HostCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>performance_schema.host_cache.IP</code>.
     */
    public final TableField<Record, String> IP = createField(DSL.name("IP"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.host_cache.HOST</code>.
     */
    public final TableField<Record, String> HOST = createField(DSL.name("HOST"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>performance_schema.host_cache.HOST_VALIDATED</code>.
     */
    public final TableField<Record, HostCacheHostValidated> HOST_VALIDATED = createField(DSL.name("HOST_VALIDATED"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.HostCacheHostValidated.class), this, "");

    /**
     * The column <code>performance_schema.host_cache.SUM_CONNECT_ERRORS</code>.
     */
    public final TableField<Record, Long> SUM_CONNECT_ERRORS = createField(DSL.name("SUM_CONNECT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_HOST_BLOCKED_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_HOST_BLOCKED_ERRORS = createField(DSL.name("COUNT_HOST_BLOCKED_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_TRANSIENT_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_NAMEINFO_TRANSIENT_ERRORS = createField(DSL.name("COUNT_NAMEINFO_TRANSIENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_PERMANENT_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_NAMEINFO_PERMANENT_ERRORS = createField(DSL.name("COUNT_NAMEINFO_PERMANENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_FORMAT_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_FORMAT_ERRORS = createField(DSL.name("COUNT_FORMAT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_TRANSIENT_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_ADDRINFO_TRANSIENT_ERRORS = createField(DSL.name("COUNT_ADDRINFO_TRANSIENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_PERMANENT_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_ADDRINFO_PERMANENT_ERRORS = createField(DSL.name("COUNT_ADDRINFO_PERMANENT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_FCRDNS_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_FCRDNS_ERRORS = createField(DSL.name("COUNT_FCRDNS_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_HOST_ACL_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_HOST_ACL_ERRORS = createField(DSL.name("COUNT_HOST_ACL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_NO_AUTH_PLUGIN_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_NO_AUTH_PLUGIN_ERRORS = createField(DSL.name("COUNT_NO_AUTH_PLUGIN_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_AUTH_PLUGIN_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_AUTH_PLUGIN_ERRORS = createField(DSL.name("COUNT_AUTH_PLUGIN_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_HANDSHAKE_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_HANDSHAKE_ERRORS = createField(DSL.name("COUNT_HANDSHAKE_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_PROXY_USER_ERRORS = createField(DSL.name("COUNT_PROXY_USER_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ACL_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_PROXY_USER_ACL_ERRORS = createField(DSL.name("COUNT_PROXY_USER_ACL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_AUTHENTICATION_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_AUTHENTICATION_ERRORS = createField(DSL.name("COUNT_AUTHENTICATION_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>performance_schema.host_cache.COUNT_SSL_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_SSL_ERRORS = createField(DSL.name("COUNT_SSL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_MAX_USER_CONNECTIONS_ERRORS = createField(DSL.name("COUNT_MAX_USER_CONNECTIONS_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS = createField(DSL.name("COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_DEFAULT_DATABASE_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_DEFAULT_DATABASE_ERRORS = createField(DSL.name("COUNT_DEFAULT_DATABASE_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_INIT_CONNECT_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_INIT_CONNECT_ERRORS = createField(DSL.name("COUNT_INIT_CONNECT_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>performance_schema.host_cache.COUNT_LOCAL_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_LOCAL_ERRORS = createField(DSL.name("COUNT_LOCAL_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.host_cache.COUNT_UNKNOWN_ERRORS</code>.
     */
    public final TableField<Record, Long> COUNT_UNKNOWN_ERRORS = createField(DSL.name("COUNT_UNKNOWN_ERRORS"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>performance_schema.host_cache.FIRST_SEEN</code>.
     */
    public final TableField<Record, LocalDateTime> FIRST_SEEN = createField(DSL.name("FIRST_SEEN"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>performance_schema.host_cache.LAST_SEEN</code>.
     */
    public final TableField<Record, LocalDateTime> LAST_SEEN = createField(DSL.name("LAST_SEEN"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>performance_schema.host_cache.FIRST_ERROR_SEEN</code>.
     */
    public final TableField<Record, LocalDateTime> FIRST_ERROR_SEEN = createField(DSL.name("FIRST_ERROR_SEEN"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>performance_schema.host_cache.LAST_ERROR_SEEN</code>.
     */
    public final TableField<Record, LocalDateTime> LAST_ERROR_SEEN = createField(DSL.name("LAST_ERROR_SEEN"), SQLDataType.LOCALDATETIME(0), this, "");

    private HostCache(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private HostCache(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.host_cache</code> table
     * reference
     */
    public HostCache(String alias) {
        this(DSL.name(alias), HOST_CACHE);
    }

    /**
     * Create an aliased <code>performance_schema.host_cache</code> table
     * reference
     */
    public HostCache(Name alias) {
        this(alias, HOST_CACHE);
    }

    /**
     * Create a <code>performance_schema.host_cache</code> table reference
     */
    public HostCache() {
        this(DSL.name("host_cache"), null);
    }

    public <O extends Record> HostCache(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, HOST_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOST_CACHE_HOST);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_HOST_CACHE_PRIMARY;
    }

    @Override
    public HostCache as(String alias) {
        return new HostCache(DSL.name(alias), this);
    }

    @Override
    public HostCache as(Name alias) {
        return new HostCache(alias, this);
    }

    @Override
    public HostCache as(Table<?> alias) {
        return new HostCache(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HostCache rename(String name) {
        return new HostCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HostCache rename(Name name) {
        return new HostCache(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HostCache rename(Table<?> name) {
        return new HostCache(name.getQualifiedName(), null);
    }
}
