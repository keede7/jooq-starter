/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.EventsStagesHistoryLongNestingEventType;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsStagesHistoryLong extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.events_stages_history_long</code>
     */
    public static final EventsStagesHistoryLong EVENTS_STAGES_HISTORY_LONG = new EventsStagesHistoryLong();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.THREAD_ID</code>.
     */
    public final TableField<Record, ULong> THREAD_ID = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.EVENT_ID</code>.
     */
    public final TableField<Record, ULong> EVENT_ID = createField(DSL.name("EVENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.END_EVENT_ID</code>.
     */
    public final TableField<Record, ULong> END_EVENT_ID = createField(DSL.name("END_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.EVENT_NAME</code>.
     */
    public final TableField<Record, String> EVENT_NAME = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.SOURCE</code>.
     */
    public final TableField<Record, String> SOURCE = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.TIMER_START</code>.
     */
    public final TableField<Record, ULong> TIMER_START = createField(DSL.name("TIMER_START"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.TIMER_END</code>.
     */
    public final TableField<Record, ULong> TIMER_END = createField(DSL.name("TIMER_END"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.TIMER_WAIT</code>.
     */
    public final TableField<Record, ULong> TIMER_WAIT = createField(DSL.name("TIMER_WAIT"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.WORK_COMPLETED</code>.
     */
    public final TableField<Record, ULong> WORK_COMPLETED = createField(DSL.name("WORK_COMPLETED"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.WORK_ESTIMATED</code>.
     */
    public final TableField<Record, ULong> WORK_ESTIMATED = createField(DSL.name("WORK_ESTIMATED"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.NESTING_EVENT_ID</code>.
     */
    public final TableField<Record, ULong> NESTING_EVENT_ID = createField(DSL.name("NESTING_EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column
     * <code>performance_schema.events_stages_history_long.NESTING_EVENT_TYPE</code>.
     */
    public final TableField<Record, EventsStagesHistoryLongNestingEventType> NESTING_EVENT_TYPE = createField(DSL.name("NESTING_EVENT_TYPE"), SQLDataType.VARCHAR(11).asEnumDataType(nu.studer.sample.performance_schema.enums.EventsStagesHistoryLongNestingEventType.class), this, "");

    private EventsStagesHistoryLong(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private EventsStagesHistoryLong(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.events_stages_history_long</code> table
     * reference
     */
    public EventsStagesHistoryLong(String alias) {
        this(DSL.name(alias), EVENTS_STAGES_HISTORY_LONG);
    }

    /**
     * Create an aliased
     * <code>performance_schema.events_stages_history_long</code> table
     * reference
     */
    public EventsStagesHistoryLong(Name alias) {
        this(alias, EVENTS_STAGES_HISTORY_LONG);
    }

    /**
     * Create a <code>performance_schema.events_stages_history_long</code> table
     * reference
     */
    public EventsStagesHistoryLong() {
        this(DSL.name("events_stages_history_long"), null);
    }

    public <O extends Record> EventsStagesHistoryLong(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, EVENTS_STAGES_HISTORY_LONG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public EventsStagesHistoryLong as(String alias) {
        return new EventsStagesHistoryLong(DSL.name(alias), this);
    }

    @Override
    public EventsStagesHistoryLong as(Name alias) {
        return new EventsStagesHistoryLong(alias, this);
    }

    @Override
    public EventsStagesHistoryLong as(Table<?> alias) {
        return new EventsStagesHistoryLong(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStagesHistoryLong rename(String name) {
        return new EventsStagesHistoryLong(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStagesHistoryLong rename(Name name) {
        return new EventsStagesHistoryLong(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStagesHistoryLong rename(Table<?> name) {
        return new EventsStagesHistoryLong(name.getQualifiedName(), null);
    }
}
