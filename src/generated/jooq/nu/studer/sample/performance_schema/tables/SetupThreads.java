/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.SetupThreadsEnabled;
import nu.studer.sample.performance_schema.enums.SetupThreadsHistory;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SetupThreads extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.setup_threads</code>
     */
    public static final SetupThreads SETUP_THREADS = new SetupThreads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>performance_schema.setup_threads.NAME</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>performance_schema.setup_threads.ENABLED</code>.
     */
    public final TableField<Record, SetupThreadsEnabled> ENABLED = createField(DSL.name("ENABLED"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.SetupThreadsEnabled.class), this, "");

    /**
     * The column <code>performance_schema.setup_threads.HISTORY</code>.
     */
    public final TableField<Record, SetupThreadsHistory> HISTORY = createField(DSL.name("HISTORY"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.SetupThreadsHistory.class), this, "");

    /**
     * The column <code>performance_schema.setup_threads.PROPERTIES</code>.
     */
    public final TableField<Record, String> PROPERTIES = createField(DSL.name("PROPERTIES"), SQLDataType.VARCHAR(14).nullable(false), this, "");

    /**
     * The column <code>performance_schema.setup_threads.VOLATILITY</code>.
     */
    public final TableField<Record, Integer> VOLATILITY = createField(DSL.name("VOLATILITY"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performance_schema.setup_threads.DOCUMENTATION</code>.
     */
    public final TableField<Record, String> DOCUMENTATION = createField(DSL.name("DOCUMENTATION"), SQLDataType.CLOB, this, "");

    private SetupThreads(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SetupThreads(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.setup_threads</code> table
     * reference
     */
    public SetupThreads(String alias) {
        this(DSL.name(alias), SETUP_THREADS);
    }

    /**
     * Create an aliased <code>performance_schema.setup_threads</code> table
     * reference
     */
    public SetupThreads(Name alias) {
        this(alias, SETUP_THREADS);
    }

    /**
     * Create a <code>performance_schema.setup_threads</code> table reference
     */
    public SetupThreads() {
        this(DSL.name("setup_threads"), null);
    }

    public <O extends Record> SetupThreads(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SETUP_THREADS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_SETUP_THREADS_PRIMARY;
    }

    @Override
    public SetupThreads as(String alias) {
        return new SetupThreads(DSL.name(alias), this);
    }

    @Override
    public SetupThreads as(Name alias) {
        return new SetupThreads(alias, this);
    }

    @Override
    public SetupThreads as(Table<?> alias) {
        return new SetupThreads(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SetupThreads rename(String name) {
        return new SetupThreads(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SetupThreads rename(Name name) {
        return new SetupThreads(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SetupThreads rename(Table<?> name) {
        return new SetupThreads(name.getQualifiedName(), null);
    }
}
