/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.performance_schema.Indexes;
import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.PreparedStatementsInstancesExecutionEngine;
import nu.studer.sample.performance_schema.enums.PreparedStatementsInstancesOwnerObjectType;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreparedStatementsInstances extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.prepared_statements_instances</code>
     */
    public static final PreparedStatementsInstances PREPARED_STATEMENTS_INSTANCES = new PreparedStatementsInstances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.OBJECT_INSTANCE_BEGIN</code>.
     */
    public final TableField<Record, ULong> OBJECT_INSTANCE_BEGIN = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.STATEMENT_ID</code>.
     */
    public final TableField<Record, ULong> STATEMENT_ID = createField(DSL.name("STATEMENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.STATEMENT_NAME</code>.
     */
    public final TableField<Record, String> STATEMENT_NAME = createField(DSL.name("STATEMENT_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SQL_TEXT</code>.
     */
    public final TableField<Record, String> SQL_TEXT = createField(DSL.name("SQL_TEXT"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.OWNER_THREAD_ID</code>.
     */
    public final TableField<Record, ULong> OWNER_THREAD_ID = createField(DSL.name("OWNER_THREAD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.OWNER_EVENT_ID</code>.
     */
    public final TableField<Record, ULong> OWNER_EVENT_ID = createField(DSL.name("OWNER_EVENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.OWNER_OBJECT_TYPE</code>.
     */
    public final TableField<Record, PreparedStatementsInstancesOwnerObjectType> OWNER_OBJECT_TYPE = createField(DSL.name("OWNER_OBJECT_TYPE"), SQLDataType.VARCHAR(9).asEnumDataType(nu.studer.sample.performance_schema.enums.PreparedStatementsInstancesOwnerObjectType.class), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.OWNER_OBJECT_SCHEMA</code>.
     */
    public final TableField<Record, String> OWNER_OBJECT_SCHEMA = createField(DSL.name("OWNER_OBJECT_SCHEMA"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.OWNER_OBJECT_NAME</code>.
     */
    public final TableField<Record, String> OWNER_OBJECT_NAME = createField(DSL.name("OWNER_OBJECT_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.EXECUTION_ENGINE</code>.
     */
    public final TableField<Record, PreparedStatementsInstancesExecutionEngine> EXECUTION_ENGINE = createField(DSL.name("EXECUTION_ENGINE"), SQLDataType.VARCHAR(9).asEnumDataType(nu.studer.sample.performance_schema.enums.PreparedStatementsInstancesExecutionEngine.class), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.TIMER_PREPARE</code>.
     */
    public final TableField<Record, ULong> TIMER_PREPARE = createField(DSL.name("TIMER_PREPARE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.COUNT_REPREPARE</code>.
     */
    public final TableField<Record, ULong> COUNT_REPREPARE = createField(DSL.name("COUNT_REPREPARE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.COUNT_EXECUTE</code>.
     */
    public final TableField<Record, ULong> COUNT_EXECUTE = createField(DSL.name("COUNT_EXECUTE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_TIMER_EXECUTE</code>.
     */
    public final TableField<Record, ULong> SUM_TIMER_EXECUTE = createField(DSL.name("SUM_TIMER_EXECUTE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.MIN_TIMER_EXECUTE</code>.
     */
    public final TableField<Record, ULong> MIN_TIMER_EXECUTE = createField(DSL.name("MIN_TIMER_EXECUTE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.AVG_TIMER_EXECUTE</code>.
     */
    public final TableField<Record, ULong> AVG_TIMER_EXECUTE = createField(DSL.name("AVG_TIMER_EXECUTE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.MAX_TIMER_EXECUTE</code>.
     */
    public final TableField<Record, ULong> MAX_TIMER_EXECUTE = createField(DSL.name("MAX_TIMER_EXECUTE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_LOCK_TIME</code>.
     */
    public final TableField<Record, ULong> SUM_LOCK_TIME = createField(DSL.name("SUM_LOCK_TIME"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_ERRORS</code>.
     */
    public final TableField<Record, ULong> SUM_ERRORS = createField(DSL.name("SUM_ERRORS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_WARNINGS</code>.
     */
    public final TableField<Record, ULong> SUM_WARNINGS = createField(DSL.name("SUM_WARNINGS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_ROWS_AFFECTED</code>.
     */
    public final TableField<Record, ULong> SUM_ROWS_AFFECTED = createField(DSL.name("SUM_ROWS_AFFECTED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_ROWS_SENT</code>.
     */
    public final TableField<Record, ULong> SUM_ROWS_SENT = createField(DSL.name("SUM_ROWS_SENT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_ROWS_EXAMINED</code>.
     */
    public final TableField<Record, ULong> SUM_ROWS_EXAMINED = createField(DSL.name("SUM_ROWS_EXAMINED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_CREATED_TMP_DISK_TABLES</code>.
     */
    public final TableField<Record, ULong> SUM_CREATED_TMP_DISK_TABLES = createField(DSL.name("SUM_CREATED_TMP_DISK_TABLES"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_CREATED_TMP_TABLES</code>.
     */
    public final TableField<Record, ULong> SUM_CREATED_TMP_TABLES = createField(DSL.name("SUM_CREATED_TMP_TABLES"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_FULL_JOIN</code>.
     */
    public final TableField<Record, ULong> SUM_SELECT_FULL_JOIN = createField(DSL.name("SUM_SELECT_FULL_JOIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_FULL_RANGE_JOIN</code>.
     */
    public final TableField<Record, ULong> SUM_SELECT_FULL_RANGE_JOIN = createField(DSL.name("SUM_SELECT_FULL_RANGE_JOIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_RANGE</code>.
     */
    public final TableField<Record, ULong> SUM_SELECT_RANGE = createField(DSL.name("SUM_SELECT_RANGE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_RANGE_CHECK</code>.
     */
    public final TableField<Record, ULong> SUM_SELECT_RANGE_CHECK = createField(DSL.name("SUM_SELECT_RANGE_CHECK"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_SCAN</code>.
     */
    public final TableField<Record, ULong> SUM_SELECT_SCAN = createField(DSL.name("SUM_SELECT_SCAN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_MERGE_PASSES</code>.
     */
    public final TableField<Record, ULong> SUM_SORT_MERGE_PASSES = createField(DSL.name("SUM_SORT_MERGE_PASSES"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_RANGE</code>.
     */
    public final TableField<Record, ULong> SUM_SORT_RANGE = createField(DSL.name("SUM_SORT_RANGE"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_ROWS</code>.
     */
    public final TableField<Record, ULong> SUM_SORT_ROWS = createField(DSL.name("SUM_SORT_ROWS"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_SCAN</code>.
     */
    public final TableField<Record, ULong> SUM_SORT_SCAN = createField(DSL.name("SUM_SORT_SCAN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_NO_INDEX_USED</code>.
     */
    public final TableField<Record, ULong> SUM_NO_INDEX_USED = createField(DSL.name("SUM_NO_INDEX_USED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_NO_GOOD_INDEX_USED</code>.
     */
    public final TableField<Record, ULong> SUM_NO_GOOD_INDEX_USED = createField(DSL.name("SUM_NO_GOOD_INDEX_USED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.SUM_CPU_TIME</code>.
     */
    public final TableField<Record, ULong> SUM_CPU_TIME = createField(DSL.name("SUM_CPU_TIME"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.MAX_CONTROLLED_MEMORY</code>.
     */
    public final TableField<Record, ULong> MAX_CONTROLLED_MEMORY = createField(DSL.name("MAX_CONTROLLED_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.MAX_TOTAL_MEMORY</code>.
     */
    public final TableField<Record, ULong> MAX_TOTAL_MEMORY = createField(DSL.name("MAX_TOTAL_MEMORY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.prepared_statements_instances.COUNT_SECONDARY</code>.
     */
    public final TableField<Record, ULong> COUNT_SECONDARY = createField(DSL.name("COUNT_SECONDARY"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private PreparedStatementsInstances(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PreparedStatementsInstances(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.prepared_statements_instances</code> table
     * reference
     */
    public PreparedStatementsInstances(String alias) {
        this(DSL.name(alias), PREPARED_STATEMENTS_INSTANCES);
    }

    /**
     * Create an aliased
     * <code>performance_schema.prepared_statements_instances</code> table
     * reference
     */
    public PreparedStatementsInstances(Name alias) {
        this(alias, PREPARED_STATEMENTS_INSTANCES);
    }

    /**
     * Create a <code>performance_schema.prepared_statements_instances</code>
     * table reference
     */
    public PreparedStatementsInstances() {
        this(DSL.name("prepared_statements_instances"), null);
    }

    public <O extends Record> PreparedStatementsInstances(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PREPARED_STATEMENTS_INSTANCES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PREPARED_STATEMENTS_INSTANCES_OWNER_OBJECT_TYPE, Indexes.PREPARED_STATEMENTS_INSTANCES_STATEMENT_ID, Indexes.PREPARED_STATEMENTS_INSTANCES_STATEMENT_NAME);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_PREPARED_STATEMENTS_INSTANCES_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PREPARED_STATEMENTS_INSTANCES_OWNER_THREAD_ID);
    }

    @Override
    public PreparedStatementsInstances as(String alias) {
        return new PreparedStatementsInstances(DSL.name(alias), this);
    }

    @Override
    public PreparedStatementsInstances as(Name alias) {
        return new PreparedStatementsInstances(alias, this);
    }

    @Override
    public PreparedStatementsInstances as(Table<?> alias) {
        return new PreparedStatementsInstances(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PreparedStatementsInstances rename(String name) {
        return new PreparedStatementsInstances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PreparedStatementsInstances rename(Name name) {
        return new PreparedStatementsInstances(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PreparedStatementsInstances rename(Table<?> name) {
        return new PreparedStatementsInstances(name.getQualifiedName(), null);
    }
}
