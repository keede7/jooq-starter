/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.performance_schema.Indexes;
import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.SocketInstancesState;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SocketInstances extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.socket_instances</code>
     */
    public static final SocketInstances SOCKET_INSTANCES = new SocketInstances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>performance_schema.socket_instances.EVENT_NAME</code>.
     */
    public final TableField<Record, String> EVENT_NAME = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.socket_instances.OBJECT_INSTANCE_BEGIN</code>.
     */
    public final TableField<Record, ULong> OBJECT_INSTANCE_BEGIN = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.socket_instances.THREAD_ID</code>.
     */
    public final TableField<Record, ULong> THREAD_ID = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.socket_instances.SOCKET_ID</code>.
     */
    public final TableField<Record, Integer> SOCKET_ID = createField(DSL.name("SOCKET_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performance_schema.socket_instances.IP</code>.
     */
    public final TableField<Record, String> IP = createField(DSL.name("IP"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>performance_schema.socket_instances.PORT</code>.
     */
    public final TableField<Record, Integer> PORT = createField(DSL.name("PORT"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performance_schema.socket_instances.STATE</code>.
     */
    public final TableField<Record, SocketInstancesState> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.SocketInstancesState.class), this, "");

    private SocketInstances(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SocketInstances(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.socket_instances</code> table
     * reference
     */
    public SocketInstances(String alias) {
        this(DSL.name(alias), SOCKET_INSTANCES);
    }

    /**
     * Create an aliased <code>performance_schema.socket_instances</code> table
     * reference
     */
    public SocketInstances(Name alias) {
        this(alias, SOCKET_INSTANCES);
    }

    /**
     * Create a <code>performance_schema.socket_instances</code> table reference
     */
    public SocketInstances() {
        this(DSL.name("socket_instances"), null);
    }

    public <O extends Record> SocketInstances(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SOCKET_INSTANCES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SOCKET_INSTANCES_IP, Indexes.SOCKET_INSTANCES_SOCKET_ID, Indexes.SOCKET_INSTANCES_THREAD_ID);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_SOCKET_INSTANCES_PRIMARY;
    }

    @Override
    public SocketInstances as(String alias) {
        return new SocketInstances(DSL.name(alias), this);
    }

    @Override
    public SocketInstances as(Name alias) {
        return new SocketInstances(alias, this);
    }

    @Override
    public SocketInstances as(Table<?> alias) {
        return new SocketInstances(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SocketInstances rename(String name) {
        return new SocketInstances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SocketInstances rename(Name name) {
        return new SocketInstances(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SocketInstances rename(Table<?> name) {
        return new SocketInstances(name.getQualifiedName(), null);
    }
}
