/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.SetupInstrumentsEnabled;
import nu.studer.sample.performance_schema.enums.SetupInstrumentsTimed;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SetupInstruments extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.setup_instruments</code>
     */
    public static final SetupInstruments SETUP_INSTRUMENTS = new SetupInstruments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>performance_schema.setup_instruments.NAME</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>performance_schema.setup_instruments.ENABLED</code>.
     */
    public final TableField<Record, SetupInstrumentsEnabled> ENABLED = createField(DSL.name("ENABLED"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.SetupInstrumentsEnabled.class), this, "");

    /**
     * The column <code>performance_schema.setup_instruments.TIMED</code>.
     */
    public final TableField<Record, SetupInstrumentsTimed> TIMED = createField(DSL.name("TIMED"), SQLDataType.VARCHAR(3).asEnumDataType(nu.studer.sample.performance_schema.enums.SetupInstrumentsTimed.class), this, "");

    /**
     * The column <code>performance_schema.setup_instruments.PROPERTIES</code>.
     */
    public final TableField<Record, String> PROPERTIES = createField(DSL.name("PROPERTIES"), SQLDataType.VARCHAR(71).nullable(false), this, "");

    /**
     * The column <code>performance_schema.setup_instruments.FLAGS</code>.
     */
    public final TableField<Record, String> FLAGS = createField(DSL.name("FLAGS"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>performance_schema.setup_instruments.VOLATILITY</code>.
     */
    public final TableField<Record, Integer> VOLATILITY = createField(DSL.name("VOLATILITY"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.setup_instruments.DOCUMENTATION</code>.
     */
    public final TableField<Record, String> DOCUMENTATION = createField(DSL.name("DOCUMENTATION"), SQLDataType.CLOB, this, "");

    private SetupInstruments(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SetupInstruments(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.setup_instruments</code> table
     * reference
     */
    public SetupInstruments(String alias) {
        this(DSL.name(alias), SETUP_INSTRUMENTS);
    }

    /**
     * Create an aliased <code>performance_schema.setup_instruments</code> table
     * reference
     */
    public SetupInstruments(Name alias) {
        this(alias, SETUP_INSTRUMENTS);
    }

    /**
     * Create a <code>performance_schema.setup_instruments</code> table
     * reference
     */
    public SetupInstruments() {
        this(DSL.name("setup_instruments"), null);
    }

    public <O extends Record> SetupInstruments(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SETUP_INSTRUMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_SETUP_INSTRUMENTS_PRIMARY;
    }

    @Override
    public SetupInstruments as(String alias) {
        return new SetupInstruments(DSL.name(alias), this);
    }

    @Override
    public SetupInstruments as(Name alias) {
        return new SetupInstruments(alias, this);
    }

    @Override
    public SetupInstruments as(Table<?> alias) {
        return new SetupInstruments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SetupInstruments rename(String name) {
        return new SetupInstruments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SetupInstruments rename(Name name) {
        return new SetupInstruments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SetupInstruments rename(Table<?> name) {
        return new SetupInstruments(name.getQualifiedName(), null);
    }
}
