/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import nu.studer.sample.performance_schema.PerformanceSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbRedoLogFiles extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.innodb_redo_log_files</code>
     */
    public static final InnodbRedoLogFiles INNODB_REDO_LOG_FILES = new InnodbRedoLogFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>performance_schema.innodb_redo_log_files.FILE_ID</code>.
     * Id of the file.
     */
    public final TableField<Record, Long> FILE_ID = createField(DSL.name("FILE_ID"), SQLDataType.BIGINT.nullable(false), this, "Id of the file.");

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.FILE_NAME</code>. Path to
     * the file.
     */
    public final TableField<Record, String> FILE_NAME = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(2000).nullable(false), this, "Path to the file.");

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.START_LSN</code>. LSN of
     * the first block in the file.
     */
    public final TableField<Record, Long> START_LSN = createField(DSL.name("START_LSN"), SQLDataType.BIGINT.nullable(false), this, "LSN of the first block in the file.");

    /**
     * The column <code>performance_schema.innodb_redo_log_files.END_LSN</code>.
     * LSN after the last block in the file.
     */
    public final TableField<Record, Long> END_LSN = createField(DSL.name("END_LSN"), SQLDataType.BIGINT.nullable(false), this, "LSN after the last block in the file.");

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.SIZE_IN_BYTES</code>. Size
     * of the file (in bytes).
     */
    public final TableField<Record, Long> SIZE_IN_BYTES = createField(DSL.name("SIZE_IN_BYTES"), SQLDataType.BIGINT.nullable(false), this, "Size of the file (in bytes).");

    /**
     * The column <code>performance_schema.innodb_redo_log_files.IS_FULL</code>.
     * 1 iff file has no free space inside.
     */
    public final TableField<Record, Byte> IS_FULL = createField(DSL.name("IS_FULL"), SQLDataType.TINYINT.nullable(false), this, "1 iff file has no free space inside.");

    /**
     * The column
     * <code>performance_schema.innodb_redo_log_files.CONSUMER_LEVEL</code>. All
     * redo log consumers registered on smaller levels than this value, have
     * already consumed this file.
     */
    public final TableField<Record, Integer> CONSUMER_LEVEL = createField(DSL.name("CONSUMER_LEVEL"), SQLDataType.INTEGER.nullable(false), this, "All redo log consumers registered on smaller levels than this value, have already consumed this file.");

    private InnodbRedoLogFiles(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private InnodbRedoLogFiles(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.innodb_redo_log_files</code>
     * table reference
     */
    public InnodbRedoLogFiles(String alias) {
        this(DSL.name(alias), INNODB_REDO_LOG_FILES);
    }

    /**
     * Create an aliased <code>performance_schema.innodb_redo_log_files</code>
     * table reference
     */
    public InnodbRedoLogFiles(Name alias) {
        this(alias, INNODB_REDO_LOG_FILES);
    }

    /**
     * Create a <code>performance_schema.innodb_redo_log_files</code> table
     * reference
     */
    public InnodbRedoLogFiles() {
        this(DSL.name("innodb_redo_log_files"), null);
    }

    public <O extends Record> InnodbRedoLogFiles(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, INNODB_REDO_LOG_FILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public InnodbRedoLogFiles as(String alias) {
        return new InnodbRedoLogFiles(DSL.name(alias), this);
    }

    @Override
    public InnodbRedoLogFiles as(Name alias) {
        return new InnodbRedoLogFiles(alias, this);
    }

    @Override
    public InnodbRedoLogFiles as(Table<?> alias) {
        return new InnodbRedoLogFiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbRedoLogFiles rename(String name) {
        return new InnodbRedoLogFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbRedoLogFiles rename(Name name) {
        return new InnodbRedoLogFiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbRedoLogFiles rename(Table<?> name) {
        return new InnodbRedoLogFiles(name.getQualifiedName(), null);
    }
}
