/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import java.time.LocalDateTime;

import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.ReplicationApplierFiltersConfiguredBy;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationApplierFilters extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.replication_applier_filters</code>
     */
    public static final ReplicationApplierFilters REPLICATION_APPLIER_FILTERS = new ReplicationApplierFilters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>performance_schema.replication_applier_filters.CHANNEL_NAME</code>.
     */
    public final TableField<Record, String> CHANNEL_NAME = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_applier_filters.FILTER_NAME</code>.
     */
    public final TableField<Record, String> FILTER_NAME = createField(DSL.name("FILTER_NAME"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_applier_filters.FILTER_RULE</code>.
     */
    public final TableField<Record, String> FILTER_RULE = createField(DSL.name("FILTER_RULE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_applier_filters.CONFIGURED_BY</code>.
     */
    public final TableField<Record, ReplicationApplierFiltersConfiguredBy> CONFIGURED_BY = createField(DSL.name("CONFIGURED_BY"), SQLDataType.VARCHAR(37).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationApplierFiltersConfiguredBy.class), this, "");

    /**
     * The column
     * <code>performance_schema.replication_applier_filters.ACTIVE_SINCE</code>.
     */
    public final TableField<Record, LocalDateTime> ACTIVE_SINCE = createField(DSL.name("ACTIVE_SINCE"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_applier_filters.COUNTER</code>.
     */
    public final TableField<Record, ULong> COUNTER = createField(DSL.name("COUNTER"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    private ReplicationApplierFilters(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationApplierFilters(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.replication_applier_filters</code> table
     * reference
     */
    public ReplicationApplierFilters(String alias) {
        this(DSL.name(alias), REPLICATION_APPLIER_FILTERS);
    }

    /**
     * Create an aliased
     * <code>performance_schema.replication_applier_filters</code> table
     * reference
     */
    public ReplicationApplierFilters(Name alias) {
        this(alias, REPLICATION_APPLIER_FILTERS);
    }

    /**
     * Create a <code>performance_schema.replication_applier_filters</code>
     * table reference
     */
    public ReplicationApplierFilters() {
        this(DSL.name("replication_applier_filters"), null);
    }

    public <O extends Record> ReplicationApplierFilters(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REPLICATION_APPLIER_FILTERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public ReplicationApplierFilters as(String alias) {
        return new ReplicationApplierFilters(DSL.name(alias), this);
    }

    @Override
    public ReplicationApplierFilters as(Name alias) {
        return new ReplicationApplierFilters(alias, this);
    }

    @Override
    public ReplicationApplierFilters as(Table<?> alias) {
        return new ReplicationApplierFilters(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationApplierFilters rename(String name) {
        return new ReplicationApplierFilters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationApplierFilters rename(Name name) {
        return new ReplicationApplierFilters(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationApplierFilters rename(Table<?> name) {
        return new ReplicationApplierFilters(name.getQualifiedName(), null);
    }
}
