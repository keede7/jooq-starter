/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;
import nu.studer.sample.performance_schema.enums.ReplicationApplierConfigurationAssignGtidsToAnonymousTransactionsType;
import nu.studer.sample.performance_schema.enums.ReplicationApplierConfigurationRequireRowFormat;
import nu.studer.sample.performance_schema.enums.ReplicationApplierConfigurationRequireTablePrimaryKeyCheck;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationApplierConfiguration extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.replication_applier_configuration</code>
     */
    public static final ReplicationApplierConfiguration REPLICATION_APPLIER_CONFIGURATION = new ReplicationApplierConfiguration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>performance_schema.replication_applier_configuration.CHANNEL_NAME</code>.
     */
    public final TableField<Record, String> CHANNEL_NAME = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_applier_configuration.DESIRED_DELAY</code>.
     */
    public final TableField<Record, Integer> DESIRED_DELAY = createField(DSL.name("DESIRED_DELAY"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_applier_configuration.PRIVILEGE_CHECKS_USER</code>.
     * User name for the security context of the applier.
     */
    public final TableField<Record, String> PRIVILEGE_CHECKS_USER = createField(DSL.name("PRIVILEGE_CHECKS_USER"), SQLDataType.CLOB, this, "User name for the security context of the applier.");

    /**
     * The column
     * <code>performance_schema.replication_applier_configuration.REQUIRE_ROW_FORMAT</code>.
     * Indicates whether the channel shall only accept row based events.
     */
    public final TableField<Record, ReplicationApplierConfigurationRequireRowFormat> REQUIRE_ROW_FORMAT = createField(DSL.name("REQUIRE_ROW_FORMAT"), SQLDataType.VARCHAR(3).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationApplierConfigurationRequireRowFormat.class), this, "Indicates whether the channel shall only accept row based events.");

    /**
     * The column
     * <code>performance_schema.replication_applier_configuration.REQUIRE_TABLE_PRIMARY_KEY_CHECK</code>.
     * Indicates what is the channel policy regarding tables without primary
     * keys on create and alter table queries
     */
    public final TableField<Record, ReplicationApplierConfigurationRequireTablePrimaryKeyCheck> REQUIRE_TABLE_PRIMARY_KEY_CHECK = createField(DSL.name("REQUIRE_TABLE_PRIMARY_KEY_CHECK"), SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationApplierConfigurationRequireTablePrimaryKeyCheck.class), this, "Indicates what is the channel policy regarding tables without primary keys on create and alter table queries");

    /**
     * The column
     * <code>performance_schema.replication_applier_configuration.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_TYPE</code>.
     * Indicates whether the channel will generate a new GTID for anonymous
     * transactions. OFF means that anonymous transactions will remain
     * anonymous. LOCAL means that anonymous transactions will be assigned a
     * newly generated GTID based on server_uuid. UUID indicates that anonymous
     * transactions will be assigned a newly generated GTID based on
     * Assign_gtids_to_anonymous_transactions_value
     */
    public final TableField<Record, ReplicationApplierConfigurationAssignGtidsToAnonymousTransactionsType> ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_TYPE = createField(DSL.name("ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_TYPE"), SQLDataType.VARCHAR(5).nullable(false).asEnumDataType(nu.studer.sample.performance_schema.enums.ReplicationApplierConfigurationAssignGtidsToAnonymousTransactionsType.class), this, "Indicates whether the channel will generate a new GTID for anonymous transactions. OFF means that anonymous transactions will remain anonymous. LOCAL means that anonymous transactions will be assigned a newly generated GTID based on server_uuid. UUID indicates that anonymous transactions will be assigned a newly generated GTID based on Assign_gtids_to_anonymous_transactions_value");

    /**
     * The column
     * <code>performance_schema.replication_applier_configuration.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_VALUE</code>.
     * Indicates the UUID used while generating GTIDs for anonymous transactions
     */
    public final TableField<Record, String> ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_VALUE = createField(DSL.name("ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_VALUE"), SQLDataType.CLOB, this, "Indicates the UUID used while generating GTIDs for anonymous transactions");

    private ReplicationApplierConfiguration(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationApplierConfiguration(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.replication_applier_configuration</code> table
     * reference
     */
    public ReplicationApplierConfiguration(String alias) {
        this(DSL.name(alias), REPLICATION_APPLIER_CONFIGURATION);
    }

    /**
     * Create an aliased
     * <code>performance_schema.replication_applier_configuration</code> table
     * reference
     */
    public ReplicationApplierConfiguration(Name alias) {
        this(alias, REPLICATION_APPLIER_CONFIGURATION);
    }

    /**
     * Create a
     * <code>performance_schema.replication_applier_configuration</code> table
     * reference
     */
    public ReplicationApplierConfiguration() {
        this(DSL.name("replication_applier_configuration"), null);
    }

    public <O extends Record> ReplicationApplierConfiguration(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REPLICATION_APPLIER_CONFIGURATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_REPLICATION_APPLIER_CONFIGURATION_PRIMARY;
    }

    @Override
    public ReplicationApplierConfiguration as(String alias) {
        return new ReplicationApplierConfiguration(DSL.name(alias), this);
    }

    @Override
    public ReplicationApplierConfiguration as(Name alias) {
        return new ReplicationApplierConfiguration(alias, this);
    }

    @Override
    public ReplicationApplierConfiguration as(Table<?> alias) {
        return new ReplicationApplierConfiguration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationApplierConfiguration rename(String name) {
        return new ReplicationApplierConfiguration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationApplierConfiguration rename(Name name) {
        return new ReplicationApplierConfiguration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationApplierConfiguration rename(Table<?> name) {
        return new ReplicationApplierConfiguration(name.getQualifiedName(), null);
    }
}
