/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.performance_schema.Indexes;
import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataLocks extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.data_locks</code>
     */
    public static final DataLocks DATA_LOCKS = new DataLocks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>performance_schema.data_locks.ENGINE</code>.
     */
    public final TableField<Record, String> ENGINE = createField(DSL.name("ENGINE"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.data_locks.ENGINE_LOCK_ID</code>.
     */
    public final TableField<Record, String> ENGINE_LOCK_ID = createField(DSL.name("ENGINE_LOCK_ID"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.data_locks.ENGINE_TRANSACTION_ID</code>.
     */
    public final TableField<Record, ULong> ENGINE_TRANSACTION_ID = createField(DSL.name("ENGINE_TRANSACTION_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.data_locks.THREAD_ID</code>.
     */
    public final TableField<Record, ULong> THREAD_ID = createField(DSL.name("THREAD_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.data_locks.EVENT_ID</code>.
     */
    public final TableField<Record, ULong> EVENT_ID = createField(DSL.name("EVENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>performance_schema.data_locks.OBJECT_SCHEMA</code>.
     */
    public final TableField<Record, String> OBJECT_SCHEMA = createField(DSL.name("OBJECT_SCHEMA"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.data_locks.OBJECT_NAME</code>.
     */
    public final TableField<Record, String> OBJECT_NAME = createField(DSL.name("OBJECT_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.data_locks.PARTITION_NAME</code>.
     */
    public final TableField<Record, String> PARTITION_NAME = createField(DSL.name("PARTITION_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.data_locks.SUBPARTITION_NAME</code>.
     */
    public final TableField<Record, String> SUBPARTITION_NAME = createField(DSL.name("SUBPARTITION_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.data_locks.INDEX_NAME</code>.
     */
    public final TableField<Record, String> INDEX_NAME = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>performance_schema.data_locks.OBJECT_INSTANCE_BEGIN</code>.
     */
    public final TableField<Record, ULong> OBJECT_INSTANCE_BEGIN = createField(DSL.name("OBJECT_INSTANCE_BEGIN"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.data_locks.LOCK_TYPE</code>.
     */
    public final TableField<Record, String> LOCK_TYPE = createField(DSL.name("LOCK_TYPE"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.data_locks.LOCK_MODE</code>.
     */
    public final TableField<Record, String> LOCK_MODE = createField(DSL.name("LOCK_MODE"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.data_locks.LOCK_STATUS</code>.
     */
    public final TableField<Record, String> LOCK_STATUS = createField(DSL.name("LOCK_STATUS"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>performance_schema.data_locks.LOCK_DATA</code>.
     */
    public final TableField<Record, String> LOCK_DATA = createField(DSL.name("LOCK_DATA"), SQLDataType.VARCHAR(8192), this, "");

    private DataLocks(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private DataLocks(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.data_locks</code> table
     * reference
     */
    public DataLocks(String alias) {
        this(DSL.name(alias), DATA_LOCKS);
    }

    /**
     * Create an aliased <code>performance_schema.data_locks</code> table
     * reference
     */
    public DataLocks(Name alias) {
        this(alias, DATA_LOCKS);
    }

    /**
     * Create a <code>performance_schema.data_locks</code> table reference
     */
    public DataLocks() {
        this(DSL.name("data_locks"), null);
    }

    public <O extends Record> DataLocks(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, DATA_LOCKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DATA_LOCKS_ENGINE_TRANSACTION_ID, Indexes.DATA_LOCKS_OBJECT_SCHEMA, Indexes.DATA_LOCKS_THREAD_ID);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_DATA_LOCKS_PRIMARY;
    }

    @Override
    public DataLocks as(String alias) {
        return new DataLocks(DSL.name(alias), this);
    }

    @Override
    public DataLocks as(Name alias) {
        return new DataLocks(alias, this);
    }

    @Override
    public DataLocks as(Table<?> alias) {
        return new DataLocks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataLocks rename(String name) {
        return new DataLocks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataLocks rename(Name name) {
        return new DataLocks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataLocks rename(Table<?> name) {
        return new DataLocks(name.getQualifiedName(), null);
    }
}
