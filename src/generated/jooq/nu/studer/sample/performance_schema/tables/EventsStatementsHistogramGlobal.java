/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsStatementsHistogramGlobal extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.events_statements_histogram_global</code>
     */
    public static final EventsStatementsHistogramGlobal EVENTS_STATEMENTS_HISTOGRAM_GLOBAL = new EventsStatementsHistogramGlobal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>performance_schema.events_statements_histogram_global.BUCKET_NUMBER</code>.
     */
    public final TableField<Record, UInteger> BUCKET_NUMBER = createField(DSL.name("BUCKET_NUMBER"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_statements_histogram_global.BUCKET_TIMER_LOW</code>.
     */
    public final TableField<Record, ULong> BUCKET_TIMER_LOW = createField(DSL.name("BUCKET_TIMER_LOW"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_statements_histogram_global.BUCKET_TIMER_HIGH</code>.
     */
    public final TableField<Record, ULong> BUCKET_TIMER_HIGH = createField(DSL.name("BUCKET_TIMER_HIGH"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_statements_histogram_global.COUNT_BUCKET</code>.
     */
    public final TableField<Record, ULong> COUNT_BUCKET = createField(DSL.name("COUNT_BUCKET"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_statements_histogram_global.COUNT_BUCKET_AND_LOWER</code>.
     */
    public final TableField<Record, ULong> COUNT_BUCKET_AND_LOWER = createField(DSL.name("COUNT_BUCKET_AND_LOWER"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_statements_histogram_global.BUCKET_QUANTILE</code>.
     */
    public final TableField<Record, Double> BUCKET_QUANTILE = createField(DSL.name("BUCKET_QUANTILE"), SQLDataType.DOUBLE.nullable(false), this, "");

    private EventsStatementsHistogramGlobal(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private EventsStatementsHistogramGlobal(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.events_statements_histogram_global</code> table
     * reference
     */
    public EventsStatementsHistogramGlobal(String alias) {
        this(DSL.name(alias), EVENTS_STATEMENTS_HISTOGRAM_GLOBAL);
    }

    /**
     * Create an aliased
     * <code>performance_schema.events_statements_histogram_global</code> table
     * reference
     */
    public EventsStatementsHistogramGlobal(Name alias) {
        this(alias, EVENTS_STATEMENTS_HISTOGRAM_GLOBAL);
    }

    /**
     * Create a
     * <code>performance_schema.events_statements_histogram_global</code> table
     * reference
     */
    public EventsStatementsHistogramGlobal() {
        this(DSL.name("events_statements_histogram_global"), null);
    }

    public <O extends Record> EventsStatementsHistogramGlobal(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, EVENTS_STATEMENTS_HISTOGRAM_GLOBAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_EVENTS_STATEMENTS_HISTOGRAM_GLOBAL_PRIMARY;
    }

    @Override
    public EventsStatementsHistogramGlobal as(String alias) {
        return new EventsStatementsHistogramGlobal(DSL.name(alias), this);
    }

    @Override
    public EventsStatementsHistogramGlobal as(Name alias) {
        return new EventsStatementsHistogramGlobal(alias, this);
    }

    @Override
    public EventsStatementsHistogramGlobal as(Table<?> alias) {
        return new EventsStatementsHistogramGlobal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStatementsHistogramGlobal rename(String name) {
        return new EventsStatementsHistogramGlobal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStatementsHistogramGlobal rename(Name name) {
        return new EventsStatementsHistogramGlobal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStatementsHistogramGlobal rename(Table<?> name) {
        return new EventsStatementsHistogramGlobal(name.getQualifiedName(), null);
    }
}
