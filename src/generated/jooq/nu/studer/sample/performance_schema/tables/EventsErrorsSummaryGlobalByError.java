/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import nu.studer.sample.performance_schema.Keys;
import nu.studer.sample.performance_schema.PerformanceSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsErrorsSummaryGlobalByError extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.events_errors_summary_global_by_error</code>
     */
    public static final EventsErrorsSummaryGlobalByError EVENTS_ERRORS_SUMMARY_GLOBAL_BY_ERROR = new EventsErrorsSummaryGlobalByError();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>performance_schema.events_errors_summary_global_by_error.ERROR_NUMBER</code>.
     */
    public final TableField<Record, Integer> ERROR_NUMBER = createField(DSL.name("ERROR_NUMBER"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>performance_schema.events_errors_summary_global_by_error.ERROR_NAME</code>.
     */
    public final TableField<Record, String> ERROR_NAME = createField(DSL.name("ERROR_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>performance_schema.events_errors_summary_global_by_error.SQL_STATE</code>.
     */
    public final TableField<Record, String> SQL_STATE = createField(DSL.name("SQL_STATE"), SQLDataType.VARCHAR(5), this, "");

    /**
     * The column
     * <code>performance_schema.events_errors_summary_global_by_error.SUM_ERROR_RAISED</code>.
     */
    public final TableField<Record, ULong> SUM_ERROR_RAISED = createField(DSL.name("SUM_ERROR_RAISED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_errors_summary_global_by_error.SUM_ERROR_HANDLED</code>.
     */
    public final TableField<Record, ULong> SUM_ERROR_HANDLED = createField(DSL.name("SUM_ERROR_HANDLED"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.events_errors_summary_global_by_error.FIRST_SEEN</code>.
     */
    public final TableField<Record, LocalDateTime> FIRST_SEEN = createField(DSL.name("FIRST_SEEN"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column
     * <code>performance_schema.events_errors_summary_global_by_error.LAST_SEEN</code>.
     */
    public final TableField<Record, LocalDateTime> LAST_SEEN = createField(DSL.name("LAST_SEEN"), SQLDataType.LOCALDATETIME(0), this, "");

    private EventsErrorsSummaryGlobalByError(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private EventsErrorsSummaryGlobalByError(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.events_errors_summary_global_by_error</code>
     * table reference
     */
    public EventsErrorsSummaryGlobalByError(String alias) {
        this(DSL.name(alias), EVENTS_ERRORS_SUMMARY_GLOBAL_BY_ERROR);
    }

    /**
     * Create an aliased
     * <code>performance_schema.events_errors_summary_global_by_error</code>
     * table reference
     */
    public EventsErrorsSummaryGlobalByError(Name alias) {
        this(alias, EVENTS_ERRORS_SUMMARY_GLOBAL_BY_ERROR);
    }

    /**
     * Create a
     * <code>performance_schema.events_errors_summary_global_by_error</code>
     * table reference
     */
    public EventsErrorsSummaryGlobalByError() {
        this(DSL.name("events_errors_summary_global_by_error"), null);
    }

    public <O extends Record> EventsErrorsSummaryGlobalByError(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, EVENTS_ERRORS_SUMMARY_GLOBAL_BY_ERROR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_EVENTS_ERRORS_SUMMARY_GLOBAL_BY_ERROR_ERROR_NUMBER);
    }

    @Override
    public EventsErrorsSummaryGlobalByError as(String alias) {
        return new EventsErrorsSummaryGlobalByError(DSL.name(alias), this);
    }

    @Override
    public EventsErrorsSummaryGlobalByError as(Name alias) {
        return new EventsErrorsSummaryGlobalByError(alias, this);
    }

    @Override
    public EventsErrorsSummaryGlobalByError as(Table<?> alias) {
        return new EventsErrorsSummaryGlobalByError(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsErrorsSummaryGlobalByError rename(String name) {
        return new EventsErrorsSummaryGlobalByError(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsErrorsSummaryGlobalByError rename(Name name) {
        return new EventsErrorsSummaryGlobalByError(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsErrorsSummaryGlobalByError rename(Table<?> name) {
        return new EventsErrorsSummaryGlobalByError(name.getQualifiedName(), null);
    }
}
