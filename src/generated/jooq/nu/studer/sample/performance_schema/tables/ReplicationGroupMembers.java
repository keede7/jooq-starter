/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.performance_schema.tables;


import nu.studer.sample.performance_schema.PerformanceSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationGroupMembers extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.replication_group_members</code>
     */
    public static final ReplicationGroupMembers REPLICATION_GROUP_MEMBERS = new ReplicationGroupMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>performance_schema.replication_group_members.CHANNEL_NAME</code>.
     */
    public final TableField<Record, String> CHANNEL_NAME = createField(DSL.name("CHANNEL_NAME"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_group_members.MEMBER_ID</code>.
     */
    public final TableField<Record, String> MEMBER_ID = createField(DSL.name("MEMBER_ID"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_group_members.MEMBER_HOST</code>.
     */
    public final TableField<Record, String> MEMBER_HOST = createField(DSL.name("MEMBER_HOST"), SQLDataType.CHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_group_members.MEMBER_PORT</code>.
     */
    public final TableField<Record, Integer> MEMBER_PORT = createField(DSL.name("MEMBER_PORT"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>performance_schema.replication_group_members.MEMBER_STATE</code>.
     */
    public final TableField<Record, String> MEMBER_STATE = createField(DSL.name("MEMBER_STATE"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_group_members.MEMBER_ROLE</code>.
     */
    public final TableField<Record, String> MEMBER_ROLE = createField(DSL.name("MEMBER_ROLE"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_group_members.MEMBER_VERSION</code>.
     */
    public final TableField<Record, String> MEMBER_VERSION = createField(DSL.name("MEMBER_VERSION"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.replication_group_members.MEMBER_COMMUNICATION_STACK</code>.
     */
    public final TableField<Record, String> MEMBER_COMMUNICATION_STACK = createField(DSL.name("MEMBER_COMMUNICATION_STACK"), SQLDataType.CHAR(64).nullable(false), this, "");

    private ReplicationGroupMembers(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationGroupMembers(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.replication_group_members</code> table reference
     */
    public ReplicationGroupMembers(String alias) {
        this(DSL.name(alias), REPLICATION_GROUP_MEMBERS);
    }

    /**
     * Create an aliased
     * <code>performance_schema.replication_group_members</code> table reference
     */
    public ReplicationGroupMembers(Name alias) {
        this(alias, REPLICATION_GROUP_MEMBERS);
    }

    /**
     * Create a <code>performance_schema.replication_group_members</code> table
     * reference
     */
    public ReplicationGroupMembers() {
        this(DSL.name("replication_group_members"), null);
    }

    public <O extends Record> ReplicationGroupMembers(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REPLICATION_GROUP_MEMBERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public ReplicationGroupMembers as(String alias) {
        return new ReplicationGroupMembers(DSL.name(alias), this);
    }

    @Override
    public ReplicationGroupMembers as(Name alias) {
        return new ReplicationGroupMembers(alias, this);
    }

    @Override
    public ReplicationGroupMembers as(Table<?> alias) {
        return new ReplicationGroupMembers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupMembers rename(String name) {
        return new ReplicationGroupMembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupMembers rename(Name name) {
        return new ReplicationGroupMembers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationGroupMembers rename(Table<?> name) {
        return new ReplicationGroupMembers(name.getQualifiedName(), null);
    }
}
