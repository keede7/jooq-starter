/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbSessionTempTablespaces extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES</code>
     */
    public static final InnodbSessionTempTablespaces INNODB_SESSION_TEMP_TABLESPACES = new InnodbSessionTempTablespaces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES.ID</code>.
     */
    public final TableField<Record, UInteger> ID = createField(DSL.name("ID"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES.SPACE</code>.
     */
    public final TableField<Record, UInteger> SPACE = createField(DSL.name("SPACE"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES.PATH</code>.
     */
    public final TableField<Record, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(1333).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES.SIZE</code>.
     */
    public final TableField<Record, ULong> SIZE = createField(DSL.name("SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES.STATE</code>.
     */
    public final TableField<Record, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES.PURPOSE</code>.
     */
    public final TableField<Record, String> PURPOSE = createField(DSL.name("PURPOSE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private InnodbSessionTempTablespaces(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private InnodbSessionTempTablespaces(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES</code> table
     * reference
     */
    public InnodbSessionTempTablespaces(String alias) {
        this(DSL.name(alias), INNODB_SESSION_TEMP_TABLESPACES);
    }

    /**
     * Create an aliased
     * <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES</code> table
     * reference
     */
    public InnodbSessionTempTablespaces(Name alias) {
        this(alias, INNODB_SESSION_TEMP_TABLESPACES);
    }

    /**
     * Create a <code>information_schema.INNODB_SESSION_TEMP_TABLESPACES</code>
     * table reference
     */
    public InnodbSessionTempTablespaces() {
        this(DSL.name("INNODB_SESSION_TEMP_TABLESPACES"), null);
    }

    public <O extends Record> InnodbSessionTempTablespaces(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, INNODB_SESSION_TEMP_TABLESPACES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InnodbSessionTempTablespaces as(String alias) {
        return new InnodbSessionTempTablespaces(DSL.name(alias), this);
    }

    @Override
    public InnodbSessionTempTablespaces as(Name alias) {
        return new InnodbSessionTempTablespaces(alias, this);
    }

    @Override
    public InnodbSessionTempTablespaces as(Table<?> alias) {
        return new InnodbSessionTempTablespaces(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSessionTempTablespaces rename(String name) {
        return new InnodbSessionTempTablespaces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSessionTempTablespaces rename(Name name) {
        return new InnodbSessionTempTablespaces(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbSessionTempTablespaces rename(Table<?> name) {
        return new InnodbSessionTempTablespaces(name.getQualifiedName(), null);
    }
}
