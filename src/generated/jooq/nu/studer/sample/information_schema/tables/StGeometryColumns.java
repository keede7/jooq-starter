/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StGeometryColumns extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.ST_GEOMETRY_COLUMNS</code>
     */
    public static final StGeometryColumns ST_GEOMETRY_COLUMNS = new StGeometryColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>information_schema.ST_GEOMETRY_COLUMNS.TABLE_CATALOG</code>.
     */
    public final TableField<Record, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.ST_GEOMETRY_COLUMNS.TABLE_SCHEMA</code>.
     */
    public final TableField<Record, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.ST_GEOMETRY_COLUMNS.TABLE_NAME</code>.
     */
    public final TableField<Record, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>information_schema.ST_GEOMETRY_COLUMNS.COLUMN_NAME</code>.
     */
    public final TableField<Record, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>information_schema.ST_GEOMETRY_COLUMNS.SRS_NAME</code>.
     */
    public final TableField<Record, String> SRS_NAME = createField(DSL.name("SRS_NAME"), SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>information_schema.ST_GEOMETRY_COLUMNS.SRS_ID</code>.
     */
    public final TableField<Record, UInteger> SRS_ID = createField(DSL.name("SRS_ID"), SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column
     * <code>information_schema.ST_GEOMETRY_COLUMNS.GEOMETRY_TYPE_NAME</code>.
     */
    public final TableField<Record, String> GEOMETRY_TYPE_NAME = createField(DSL.name("GEOMETRY_TYPE_NAME"), SQLDataType.CLOB, this, "");

    private StGeometryColumns(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private StGeometryColumns(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.ST_GEOMETRY_COLUMNS</code>
     * table reference
     */
    public StGeometryColumns(String alias) {
        this(DSL.name(alias), ST_GEOMETRY_COLUMNS);
    }

    /**
     * Create an aliased <code>information_schema.ST_GEOMETRY_COLUMNS</code>
     * table reference
     */
    public StGeometryColumns(Name alias) {
        this(alias, ST_GEOMETRY_COLUMNS);
    }

    /**
     * Create a <code>information_schema.ST_GEOMETRY_COLUMNS</code> table
     * reference
     */
    public StGeometryColumns() {
        this(DSL.name("ST_GEOMETRY_COLUMNS"), null);
    }

    public <O extends Record> StGeometryColumns(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ST_GEOMETRY_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public StGeometryColumns as(String alias) {
        return new StGeometryColumns(DSL.name(alias), this);
    }

    @Override
    public StGeometryColumns as(Name alias) {
        return new StGeometryColumns(alias, this);
    }

    @Override
    public StGeometryColumns as(Table<?> alias) {
        return new StGeometryColumns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StGeometryColumns rename(String name) {
        return new StGeometryColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StGeometryColumns rename(Name name) {
        return new StGeometryColumns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StGeometryColumns rename(Table<?> name) {
        return new StGeometryColumns(name.getQualifiedName(), null);
    }
}
