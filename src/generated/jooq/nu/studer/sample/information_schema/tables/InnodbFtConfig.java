/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.information_schema.tables;


import nu.studer.sample.information_schema.InformationSchema;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbFtConfig extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.INNODB_FT_CONFIG</code>
     */
    public static final InnodbFtConfig INNODB_FT_CONFIG = new InnodbFtConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>information_schema.INNODB_FT_CONFIG.KEY</code>.
     */
    public final TableField<Record, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_FT_CONFIG.VALUE</code>.
     */
    public final TableField<Record, String> VALUE = createField(DSL.name("VALUE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private InnodbFtConfig(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private InnodbFtConfig(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>information_schema.INNODB_FT_CONFIG</code> table
     * reference
     */
    public InnodbFtConfig(String alias) {
        this(DSL.name(alias), INNODB_FT_CONFIG);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_FT_CONFIG</code> table
     * reference
     */
    public InnodbFtConfig(Name alias) {
        this(alias, INNODB_FT_CONFIG);
    }

    /**
     * Create a <code>information_schema.INNODB_FT_CONFIG</code> table reference
     */
    public InnodbFtConfig() {
        this(DSL.name("INNODB_FT_CONFIG"), null);
    }

    public <O extends Record> InnodbFtConfig(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, INNODB_FT_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public InnodbFtConfig as(String alias) {
        return new InnodbFtConfig(DSL.name(alias), this);
    }

    @Override
    public InnodbFtConfig as(Name alias) {
        return new InnodbFtConfig(alias, this);
    }

    @Override
    public InnodbFtConfig as(Table<?> alias) {
        return new InnodbFtConfig(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbFtConfig rename(String name) {
        return new InnodbFtConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbFtConfig rename(Name name) {
        return new InnodbFtConfig(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbFtConfig rename(Table<?> name) {
        return new InnodbFtConfig(name.getQualifiedName(), null);
    }
}
